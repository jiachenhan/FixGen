digraph "twoTestsNotRunComeBackInRandomOrder#?" {
0 [label="1#L3:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2#L3:CtVirtualElement@twoTestsNotRunComeBackInRandomOrder" shape=ellipse]
2 [label="3#L4:CtPackageReferenceImpl@" shape=ellipse]
3 [label="4#L4:CtTypeReferenceImpl@Request" shape=ellipse]
4 [label="5#L4:CtTypeReferenceImpl@Request" shape=ellipse]
5 [label="6#L4:CtTypeReferenceImpl@Request" shape=ellipse]
6 [label="7#L4:CtTypeReferenceImpl@Class<TwoTests>" shape=ellipse]
7 [label="8#L4:CtExecutableReferenceImpl@aClass(java.lang.Class)" shape=ellipse]
8 [label="9#L4:CtVirtualElement@aClass" shape=ellipse]
9 [label="10#L4:CtTypeReferenceImpl@Request" shape=ellipse]
10 [label="11#L4:CtTypeAccessImpl@Request" shape=ellipse]
11 [label="12#L4:CtTypeReferenceImpl@TwoTests" shape=ellipse]
12 [label="13#L4:CtTypeReferenceImpl@Class" shape=ellipse]
13 [label="14#L4:CtFieldReferenceImpl@TwoTests.class" shape=ellipse]
14 [label="15#L4:CtTypeAccessImpl@TwoTests" shape=ellipse]
15 [label="16#L4:CtFieldReadImpl@TwoTests.class" shape=ellipse]
16 [label="17#L4:CtInvocationImpl@Request.aClass(TwoTests.class)" shape=ellipse]
17 [label="18#L4:CtVirtualElement@request" shape=ellipse]
18 [label="19#L4:CtLocalVariableImpl@Request request = Request.aClass(TwoTests.class)" shape=ellipse]
19 [label="20#L5:CtPackageReferenceImpl@" shape=ellipse]
20 [label="21#L5:CtTypeReferenceImpl@MaxCore" shape=ellipse]
21 [label="22#L5:CtTypeReferenceImpl@MaxCore" shape=ellipse]
22 [label="23#L5:CtTypeReferenceImpl@MaxCore" shape=ellipse]
23 [label="24#L5:CtExecutableReferenceImpl@createFresh()" shape=ellipse]
24 [label="25#L5:CtVirtualElement@createFresh" shape=ellipse]
25 [label="26#L5:CtTypeReferenceImpl@MaxCore" shape=ellipse]
26 [label="27#L5:CtTypeAccessImpl@MaxCore" shape=ellipse]
27 [label="28#L5:CtInvocationImpl@MaxCore.createFresh()" shape=ellipse]
28 [label="29#L5:CtVirtualElement@max" shape=ellipse]
29 [label="30#L5:CtLocalVariableImpl@MaxCore max = MaxCore.createFresh()" shape=ellipse]
30 [label="31#L6:CtPackageReferenceImpl@" shape=ellipse]
31 [label="32#L6:CtTypeReferenceImpl@Description" shape=ellipse]
32 [label="33#L6:CtTypeReferenceImpl@List<Description>" shape=ellipse]
33 [label="34#L6:CtTypeReferenceImpl@MaxCore" shape=ellipse]
34 [label="35#L6:CtTypeReferenceImpl@List<Description>" shape=ellipse]
35 [label="36#L6:CtTypeReferenceImpl@Request" shape=ellipse]
36 [label="37#L6:CtExecutableReferenceImpl@sort(Request)" shape=ellipse]
37 [label="38#L6:CtVirtualElement@sort" shape=ellipse]
38 [label="39#L6:CtLocalVariableReferenceImpl@max" shape=ellipse]
39 [label="40#L6:CtVariableReadImpl@max" shape=ellipse]
40 [label="41#L6:CtLocalVariableReferenceImpl@request" shape=ellipse]
41 [label="42#L6:CtVariableReadImpl@request" shape=ellipse]
42 [label="43#L6:CtInvocationImpl@max.sort(request)" shape=ellipse]
43 [label="44#L6:CtVirtualElement@things" shape=ellipse]
44 [label="45#L6:CtLocalVariableImpl@List<Description> things = max.sort(request)" shape=ellipse]
45 [label="46#L7:CtPackageReferenceImpl@" shape=ellipse]
46 [label="47#L7:CtTypeReferenceImpl@Description" shape=ellipse]
47 [label="48#L8:CtTypeReferenceImpl@Description" shape=ellipse]
48 [label="49#L8:CtTypeReferenceImpl@Description" shape=ellipse]
49 [label="50#L8:CtTypeReferenceImpl@Class<TwoTests>" shape=ellipse]
50 [label="51#L8:CtTypeReferenceImpl@String" shape=ellipse]
51 [label="52#L8:CtExecutableReferenceImpl@createTestDescription(java.lang.Class,java.lang.String)" shape=ellipse]
52 [label="53#L8:CtVirtualElement@createTestDescription" shape=ellipse]
53 [label="54#L8:CtTypeReferenceImpl@Description" shape=ellipse]
54 [label="55#L8:CtTypeAccessImpl@Description" shape=ellipse]
55 [label="56#L8:CtTypeReferenceImpl@TwoTests" shape=ellipse]
56 [label="57#L8:CtTypeReferenceImpl@Class" shape=ellipse]
57 [label="58#L8:CtFieldReferenceImpl@TwoTests.class" shape=ellipse]
58 [label="59#L8:CtTypeAccessImpl@TwoTests" shape=ellipse]
59 [label="60#L8:CtFieldReadImpl@TwoTests.class" shape=ellipse]
60 [label="61#L8:CtTypeReferenceImpl@String" shape=ellipse]
61 [label="62#L8:CtLiteralImpl@\"succeed\"" shape=ellipse]
62 [label="63#L8:CtInvocationImpl@Description.createTestDescription(TwoTests.class, \"succeed\")" shape=ellipse]
63 [label="64#L7:CtVirtualElement@succeed" shape=ellipse]
64 [label="65#L7:CtLocalVariableImpl@Description succeed = Description.createTestDescription(TwoTests.class, \"succeed\")" shape=ellipse]
65 [label="66#L9:CtPackageReferenceImpl@" shape=ellipse]
66 [label="67#L9:CtTypeReferenceImpl@Description" shape=ellipse]
67 [label="68#L10:CtTypeReferenceImpl@Description" shape=ellipse]
68 [label="69#L10:CtTypeReferenceImpl@Description" shape=ellipse]
69 [label="70#L10:CtTypeReferenceImpl@Class<TwoTests>" shape=ellipse]
70 [label="71#L10:CtTypeReferenceImpl@String" shape=ellipse]
71 [label="72#L10:CtExecutableReferenceImpl@createTestDescription(java.lang.Class,java.lang.String)" shape=ellipse]
72 [label="73#L10:CtVirtualElement@createTestDescription" shape=ellipse]
73 [label="74#L10:CtTypeReferenceImpl@Description" shape=ellipse]
74 [label="75#L10:CtTypeAccessImpl@Description" shape=ellipse]
75 [label="76#L10:CtTypeReferenceImpl@TwoTests" shape=ellipse]
76 [label="77#L10:CtTypeReferenceImpl@Class" shape=ellipse]
77 [label="78#L10:CtFieldReferenceImpl@TwoTests.class" shape=ellipse]
78 [label="79#L10:CtTypeAccessImpl@TwoTests" shape=ellipse]
79 [label="80#L10:CtFieldReadImpl@TwoTests.class" shape=ellipse]
80 [label="81#L10:CtTypeReferenceImpl@String" shape=ellipse]
81 [label="82#L10:CtLiteralImpl@\"dontSucceed\"" shape=ellipse]
82 [label="83#L10:CtInvocationImpl@Description.createTestDescription(TwoTests.class, \"dontSucceed\")" shape=ellipse]
83 [label="84#L9:CtVirtualElement@dontSucceed" shape=ellipse]
84 [label="85#L9:CtLocalVariableImpl@Description dontSucceed = Description.createTestDescription(TwoTests.class, \"dontSucceed\")" shape=ellipse]
85 [label="86#L11:CtTypeReferenceImpl@null" shape=ellipse]
86 [label="87#L11:CtExecutableReferenceImpl@assertTrue(<unknown>)" shape=ellipse]
87 [label="88#L11:CtVirtualElement@assertTrue" shape=ellipse]
88 [label="89#L11:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
89 [label="90#L11:CtTypeAccessImpl@PlaceHold" shape=ellipse]
90 [label="91#L11:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
91 [label="92#L11:CtThisAccessImpl@" shape=ellipse]
92 [label="93#L11:CtTypeReferenceImpl@List<Description>" shape=ellipse]
93 [label="94#L11:CtTypeReferenceImpl@Description" shape=ellipse]
94 [label="95#L11:CtExecutableReferenceImpl@contains(Description)" shape=ellipse]
95 [label="96#L11:CtVirtualElement@contains" shape=ellipse]
96 [label="97#L11:CtLocalVariableReferenceImpl@things" shape=ellipse]
97 [label="98#L11:CtVariableReadImpl@things" shape=ellipse]
98 [label="99#L11:CtLocalVariableReferenceImpl@succeed" shape=ellipse]
99 [label="100#L11:CtVariableReadImpl@succeed" shape=ellipse]
100 [label="101#L11:CtInvocationImpl@things.contains(succeed)" shape=ellipse]
101 [label="102#L11:CtInvocationImpl@assertTrue(things.contains(succeed))" shape=ellipse]
102 [label="103#L12:CtTypeReferenceImpl@null" shape=ellipse]
103 [label="104#L12:CtExecutableReferenceImpl@assertTrue(<unknown>)" shape=ellipse]
104 [label="105#L12:CtVirtualElement@assertTrue" shape=ellipse]
105 [label="106#L12:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
106 [label="107#L12:CtTypeAccessImpl@PlaceHold" shape=ellipse]
107 [label="108#L12:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
108 [label="109#L12:CtThisAccessImpl@" shape=ellipse]
109 [label="110#L12:CtTypeReferenceImpl@List<Description>" shape=ellipse]
110 [label="111#L12:CtTypeReferenceImpl@Description" shape=ellipse]
111 [label="112#L12:CtExecutableReferenceImpl@contains(Description)" shape=ellipse]
112 [label="113#L12:CtVirtualElement@contains" shape=ellipse]
113 [label="114#L12:CtLocalVariableReferenceImpl@things" shape=ellipse]
114 [label="115#L12:CtVariableReadImpl@things" shape=ellipse]
115 [label="116#L12:CtLocalVariableReferenceImpl@dontSucceed" shape=ellipse]
116 [label="117#L12:CtVariableReadImpl@dontSucceed" shape=ellipse]
117 [label="118#L12:CtInvocationImpl@things.contains(dontSucceed)" shape=ellipse]
118 [label="119#L12:CtInvocationImpl@assertTrue(things.contains(dontSucceed))" shape=ellipse]
119 [label="120#L13:CtTypeReferenceImpl@int" shape=ellipse]
120 [label="121#L13:CtTypeReferenceImpl@null" shape=ellipse]
121 [label="122#L13:CtExecutableReferenceImpl@assertEquals(int,<unknown>)" shape=ellipse]
122 [label="123#L13:CtVirtualElement@assertEquals" shape=ellipse]
123 [label="124#L13:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
124 [label="125#L13:CtTypeAccessImpl@PlaceHold" shape=ellipse]
125 [label="126#L13:CtTypeReferenceImpl@PlaceHold" shape=ellipse]
126 [label="127#L13:CtThisAccessImpl@" shape=ellipse]
127 [label="128#L13:CtTypeReferenceImpl@int" shape=ellipse]
128 [label="129#L13:CtLiteralImpl@2" shape=ellipse]
129 [label="130#L13:CtTypeReferenceImpl@List<Description>" shape=ellipse]
130 [label="131#L13:CtExecutableReferenceImpl@size()" shape=ellipse]
131 [label="132#L13:CtVirtualElement@size" shape=ellipse]
132 [label="133#L13:CtLocalVariableReferenceImpl@things" shape=ellipse]
133 [label="134#L13:CtVariableReadImpl@things" shape=ellipse]
134 [label="135#L13:CtInvocationImpl@things.size()" shape=ellipse]
135 [label="136#L13:CtInvocationImpl@assertEquals(2, things.size())" shape=ellipse]
136 [label="137#L3:CtBlockImpl@\{
    Request request = Request.aClass(TwoTests.class);
    MaxCore max = MaxCore.createFresh();
    List<Description> things = max.sort(request);
    Description succeed = Description.createTestDescription(TwoTests.class, \"succeed\");
    Description dontSucceed = Description.createTestDescription(TwoTests.class, \"dontSucceed\");
    assertTrue(things.contains(succeed));
    assertTrue(things.contains(dontSucceed));
    assertEquals(2, things.size());
\}" shape=ellipse]
137 [label="138#L2:CtAnnotationImpl@@Test" shape=ellipse]
138 [label="139#L3:CtMethodImpl@@Test
public void twoTestsNotRunComeBackInRandomOrder() \{
    Request request = Request.aClass(TwoTests.class);
    MaxCore max = MaxCore.createFresh();
    List<Description> things = max.sort(request);
    Description succeed = Description.createTestDescription(TwoTests.class, \"succeed\");
    Description dontSucceed = Description.createTestDescription(TwoTests.class, \"dontSucceed\");
    assertTrue(things.contains(succeed));
    assertTrue(things.contains(dontSucceed));
    assertEquals(2, things.size());
\}" shape=ellipse]
139 [label="290#L6:Update@UPDATE" shape=ellipse]
140 [label="291#L6:CtPackageReferenceImpl@" shape=ellipse]
141 [label="292#L6:CtTypeReferenceImpl@MaxCore" shape=ellipse]
142 [label="293#L6:CtLocalVariableReferenceImpl@max" shape=ellipse]
143 [label="294#L6:CtVariableReadImpl@max" shape=ellipse]
144 [label="295#L6:CtPackageReferenceImpl@" shape=ellipse]
145 [label="296#L6:CtTypeReferenceImpl@MaxCore" shape=ellipse]
146 [label="297#L6:CtPackageReferenceImpl@" shape=ellipse]
147 [label="298#L6:CtPackageReferenceImpl@" shape=ellipse]
148 [label="299#L6:CtTypeReferenceImpl@Description" shape=ellipse]
149 [label="300#L6:CtTypeReferenceImpl@List<Description>" shape=ellipse]
150 [label="301#L6:CtPackageReferenceImpl@" shape=ellipse]
151 [label="302#L6:CtTypeReferenceImpl@Request" shape=ellipse]
152 [label="303#L6:CtExecutableReferenceImpl@sortedLeavesForTest(Request)" shape=ellipse]
153 [label="304#L6:CtPackageReferenceImpl@" shape=ellipse]
154 [label="305#L6:CtTypeReferenceImpl@Request" shape=ellipse]
155 [label="306#L6:CtLocalVariableReferenceImpl@request" shape=ellipse]
156 [label="307#L6:CtVariableReadImpl@request" shape=ellipse]
157 [label="308#L6:CtInvocationImpl@max.sortedLeavesForTest(request)" shape=ellipse]
158 [label="309#L6:CtVirtualElement@sortedLeavesForTest" shape=ellipse]
3 -> 2 [label="140#AST"];
7 -> 4 [label="141#AST"];
7 -> 5 [label="142#AST"];
7 -> 6 [label="143#AST"];
10 -> 9 [label="144#AST"];
13 -> 11 [label="145#AST"];
13 -> 12 [label="146#AST"];
15 -> 14 [label="147#AST"];
15 -> 13 [label="148#AST"];
15 -> 17 [label="149#Data Dep"];
16 -> 8 [label="150#AST"];
16 -> 10 [label="151#AST"];
16 -> 7 [label="152#AST"];
16 -> 15 [label="153#AST"];
17 -> 41 [label="154#Define-Use"];
17 -> 156 [label="310#Define-Use"];
18 -> 17 [label="155#AST"];
18 -> 3 [label="156#AST"];
18 -> 16 [label="157#AST"];
20 -> 19 [label="158#AST"];
23 -> 21 [label="159#AST"];
23 -> 22 [label="160#AST"];
26 -> 25 [label="161#AST"];
27 -> 24 [label="162#AST"];
27 -> 26 [label="163#AST"];
27 -> 23 [label="164#AST"];
28 -> 39 [label="165#Define-Use"];
28 -> 143 [label="311#Define-Use"];
29 -> 28 [label="166#AST"];
29 -> 20 [label="167#AST"];
29 -> 27 [label="168#AST"];
32 -> 30 [label="169#AST"];
32 -> 31 [label="170#AST"];
36 -> 33 [label="171#AST"];
36 -> 34 [label="172#AST"];
36 -> 35 [label="173#AST"];
39 -> 38 [label="174#AST"];
39 -> 43 [label="175#Data Dep"];
41 -> 40 [label="176#AST"];
41 -> 43 [label="177#Data Dep"];
42 -> 37 [label="178#AST"];
42 -> 39 [label="179#AST"];
42 -> 36 [label="180#AST"];
42 -> 41 [label="181#AST"];
42 -> 139 [label="312#Action"];
43 -> 97 [label="182#Define-Use"];
43 -> 114 [label="183#Define-Use"];
43 -> 133 [label="184#Define-Use"];
44 -> 43 [label="185#AST"];
44 -> 32 [label="186#AST"];
44 -> 42 [label="187#AST"];
46 -> 45 [label="188#AST"];
51 -> 47 [label="189#AST"];
51 -> 48 [label="190#AST"];
51 -> 49 [label="191#AST"];
51 -> 50 [label="192#AST"];
54 -> 53 [label="193#AST"];
57 -> 55 [label="194#AST"];
57 -> 56 [label="195#AST"];
59 -> 58 [label="196#AST"];
59 -> 57 [label="197#AST"];
59 -> 63 [label="198#Data Dep"];
61 -> 60 [label="199#AST"];
62 -> 52 [label="200#AST"];
62 -> 54 [label="201#AST"];
62 -> 51 [label="202#AST"];
62 -> 59 [label="203#AST"];
62 -> 61 [label="204#AST"];
63 -> 99 [label="205#Define-Use"];
64 -> 63 [label="206#AST"];
64 -> 46 [label="207#AST"];
64 -> 62 [label="208#AST"];
66 -> 65 [label="209#AST"];
71 -> 67 [label="210#AST"];
71 -> 68 [label="211#AST"];
71 -> 69 [label="212#AST"];
71 -> 70 [label="213#AST"];
74 -> 73 [label="214#AST"];
77 -> 75 [label="215#AST"];
77 -> 76 [label="216#AST"];
79 -> 78 [label="217#AST"];
79 -> 77 [label="218#AST"];
79 -> 83 [label="219#Data Dep"];
81 -> 80 [label="220#AST"];
82 -> 72 [label="221#AST"];
82 -> 74 [label="222#AST"];
82 -> 71 [label="223#AST"];
82 -> 79 [label="224#AST"];
82 -> 81 [label="225#AST"];
83 -> 116 [label="226#Define-Use"];
84 -> 83 [label="227#AST"];
84 -> 66 [label="228#AST"];
84 -> 82 [label="229#AST"];
86 -> 85 [label="230#AST"];
89 -> 88 [label="231#AST"];
91 -> 90 [label="232#AST"];
91 -> 89 [label="233#AST"];
94 -> 92 [label="234#AST"];
94 -> 93 [label="235#AST"];
97 -> 96 [label="236#AST"];
99 -> 98 [label="237#AST"];
100 -> 95 [label="238#AST"];
100 -> 97 [label="239#AST"];
100 -> 94 [label="240#AST"];
100 -> 99 [label="241#AST"];
101 -> 87 [label="242#AST"];
101 -> 91 [label="243#AST"];
101 -> 86 [label="244#AST"];
101 -> 100 [label="245#AST"];
103 -> 102 [label="246#AST"];
106 -> 105 [label="247#AST"];
108 -> 107 [label="248#AST"];
108 -> 106 [label="249#AST"];
111 -> 109 [label="250#AST"];
111 -> 110 [label="251#AST"];
114 -> 113 [label="252#AST"];
116 -> 115 [label="253#AST"];
117 -> 112 [label="254#AST"];
117 -> 114 [label="255#AST"];
117 -> 111 [label="256#AST"];
117 -> 116 [label="257#AST"];
118 -> 104 [label="258#AST"];
118 -> 108 [label="259#AST"];
118 -> 103 [label="260#AST"];
118 -> 117 [label="261#AST"];
121 -> 119 [label="262#AST"];
121 -> 120 [label="263#AST"];
124 -> 123 [label="264#AST"];
126 -> 125 [label="265#AST"];
126 -> 124 [label="266#AST"];
128 -> 127 [label="267#AST"];
130 -> 129 [label="268#AST"];
133 -> 132 [label="269#AST"];
134 -> 131 [label="270#AST"];
134 -> 133 [label="271#AST"];
134 -> 130 [label="272#AST"];
135 -> 122 [label="273#AST"];
135 -> 126 [label="274#AST"];
135 -> 121 [label="275#AST"];
135 -> 128 [label="276#AST"];
135 -> 134 [label="277#AST"];
136 -> 18 [label="278#AST"];
136 -> 29 [label="279#AST"];
136 -> 44 [label="280#AST"];
136 -> 64 [label="281#AST"];
136 -> 84 [label="282#AST"];
136 -> 101 [label="283#AST"];
136 -> 118 [label="284#AST"];
136 -> 135 [label="285#AST"];
138 -> 1 [label="286#AST"];
138 -> 137 [label="287#AST"];
138 -> 0 [label="288#AST"];
138 -> 136 [label="289#AST"];
139 -> 157 [label="315#Action"];
141 -> 140 [label="316#AST"];
142 -> 141 [label="317#AST"];
143 -> 142 [label="318#AST"];
143 -> 43 [label="320#Data Dep"];
145 -> 144 [label="321#AST"];
148 -> 147 [label="322#AST"];
149 -> 146 [label="323#AST"];
149 -> 148 [label="324#AST"];
151 -> 150 [label="325#AST"];
152 -> 145 [label="326#AST"];
152 -> 149 [label="327#AST"];
152 -> 151 [label="328#AST"];
154 -> 153 [label="329#AST"];
155 -> 154 [label="330#AST"];
156 -> 155 [label="331#AST"];
156 -> 43 [label="333#Data Dep"];
157 -> 158 [label="334#AST"];
157 -> 143 [label="335#AST"];
157 -> 152 [label="336#AST"];
157 -> 156 [label="337#AST"];
}