digraph "parse#?,Project,Object" {
0 [label="2:CtTypeReferenceImpl@void" shape=ellipse]
1 [label="2:CtParameterImpl@Project project" shape=ellipse]
2 [label="2:CtParameterImpl@Object source" shape=ellipse]
3 [label="2:CtTypeReferenceImpl@BuildException" shape=ellipse]
4 [label="3:CtVariableReadImpl@source" shape=ellipse]
5 [label="3:CtTypeAccessImpl@File" shape=ellipse]
6 [label="3:CtBinaryOperatorImpl@(source instanceof File)" shape=ellipse]
7 [label="3:CtUnaryOperatorImpl@!(source instanceof File)" shape=ellipse]
8 [label="4:CtLiteralImpl@\\"Only File source supported by default plugin\\"" shape=ellipse]
9 [label="4:CtConstructorCallImpl@new BuildException(\\"Only File source supported by default plugin\\")" shape=ellipse]
10 [label="4:CtThrowImpl@throw new BuildException(\\"Only File source supported by default plugin\\")" shape=ellipse]
11 [label="3:CtBlockImpl@{\\r\\n    throw new BuildException(\\"Only File source supported by default plugin\\");\\r\\n}" shape=ellipse]
12 [label="3:CtIfImpl@if (!(source instanceof File)) {\\r\\n    throw new BuildException(\\"Only File source supported by default plugin\\");\\r\\n}" shape=ellipse]
13 [label="6:CtLocalVariableImpl@File buildFile = ((File) (source))" shape=ellipse]
14 [label="7:CtLocalVariableImpl@FileInputStream inputStream = null" shape=ellipse]
15 [label="8:CtLocalVariableImpl@InputSource inputSource = null" shape=ellipse]
16 [label="9:CtFieldWriteImpl@this.project" shape=ellipse]
17 [label="9:CtVariableReadImpl@project" shape=ellipse]
18 [label="9:CtAssignmentImpl@this.project = project" shape=ellipse]
19 [label="10:CtFieldWriteImpl@this.buildFile" shape=ellipse]
20 [label="10:CtExecutableReferenceImpl@getAbsolutePath()" shape=ellipse]
21 [label="10:CtVariableReadImpl@buildFile" shape=ellipse]
22 [label="10:CtInvocationImpl@buildFile.getAbsolutePath()" shape=ellipse]
23 [label="10:CtConstructorCallImpl@new File(buildFile.getAbsolutePath())" shape=ellipse]
24 [label="10:CtAssignmentImpl@this.buildFile = new File(buildFile.getAbsolutePath())" shape=ellipse]
25 [label="11:CtFieldWriteImpl@buildFileParent" shape=ellipse]
26 [label="11:CtExecutableReferenceImpl@getParent()" shape=ellipse]
27 [label="11:CtThisAccessImpl@this" shape=ellipse]
28 [label="11:CtFieldReadImpl@this.buildFile" shape=ellipse]
29 [label="11:CtInvocationImpl@this.buildFile.getParent()" shape=ellipse]
30 [label="11:CtConstructorCallImpl@new File(this.buildFile.getParent())" shape=ellipse]
31 [label="11:CtAssignmentImpl@buildFileParent = new File(this.buildFile.getParent())" shape=ellipse]
32 [label="13:CtLocalVariableImpl@SAXParser saxParser = getParserFactory().newSAXParser()" shape=ellipse]
33 [label="15:CtFieldWriteImpl@parser" shape=ellipse]
34 [label="15:CtExecutableReferenceImpl@getParser()" shape=ellipse]
35 [label="15:CtVariableReadImpl@saxParser" shape=ellipse]
36 [label="15:CtInvocationImpl@saxParser.getParser()" shape=ellipse]
37 [label="15:CtAssignmentImpl@parser = saxParser.getParser()" shape=ellipse]
38 [label="14:CtBlockImpl@{\\r\\n    parser = saxParser.getParser();\\r\\n}" shape=ellipse]
39 [label="16:CtTypeReferenceImpl@SAXException" shape=ellipse]
40 [label="16:CtCatchVariableImpl@SAXException exc" shape=ellipse]
41 [label="17:CtFieldWriteImpl@parser" shape=ellipse]
42 [label="17:CtExecutableReferenceImpl@getXMLReader()" shape=ellipse]
43 [label="17:CtVariableReadImpl@saxParser" shape=ellipse]
44 [label="17:CtInvocationImpl@saxParser.getXMLReader()" shape=ellipse]
45 [label="17:CtConstructorCallImpl@new XMLReaderAdapter(saxParser.getXMLReader())" shape=ellipse]
46 [label="17:CtAssignmentImpl@parser = new XMLReaderAdapter(saxParser.getXMLReader())" shape=ellipse]
47 [label="16:CtBlockImpl@{\\r\\n    parser = new XMLReaderAdapter(saxParser.getXMLReader());\\r\\n}" shape=ellipse]
48 [label="16:CtCatchImpl@ catch (SAXException exc) {\\r\\n    parser = new XMLReaderAdapter(saxParser.getXMLReader());\\r\\n}" shape=ellipse]
49 [label="14:CtTryImpl@try {\\r\\n    parser = saxParser.getParser();\\r\\n} catch (SAXException exc) {\\r\\n    parser = new XMLReaderAdapter(saxParser.getXMLReader());\\r\\n}" shape=ellipse]
50 [label="19:CtLocalVariableImpl@String uri = \\"file:\\" + buildFile.getAbsolutePath().replace('\\', '/')" shape=ellipse]
51 [label="20:CtLocalVariableImpl@int index = uri.indexOf('#')" shape=ellipse]
52 [label="20:CtVariableReadImpl@index" shape=ellipse]
53 [label="20:CtLiteralImpl@1" shape=ellipse]
54 [label="20:CtUnaryOperatorImpl@(-1)" shape=ellipse]
55 [label="20:CtBinaryOperatorImpl@index != (-1)" shape=ellipse]
56 [label="20:CtVariableWriteImpl@index" shape=ellipse]
57 [label="20:CtExecutableReferenceImpl@indexOf(int)" shape=ellipse]
58 [label="20:CtVariableReadImpl@uri" shape=ellipse]
59 [label="20:CtLiteralImpl@'#'" shape=ellipse]
60 [label="20:CtInvocationImpl@uri.indexOf('#')" shape=ellipse]
61 [label="20:CtAssignmentImpl@index = uri.indexOf('#')" shape=ellipse]
62 [label="21:CtVariableWriteImpl@uri" shape=ellipse]
63 [label="21:CtExecutableReferenceImpl@substring(int,int)" shape=ellipse]
64 [label="21:CtVariableReadImpl@uri" shape=ellipse]
65 [label="21:CtLiteralImpl@0" shape=ellipse]
66 [label="21:CtVariableReadImpl@index" shape=ellipse]
67 [label="21:CtInvocationImpl@uri.substring(0, index)" shape=ellipse]
68 [label="21:CtLiteralImpl@\\"%23\\"" shape=ellipse]
69 [label="21:CtBinaryOperatorImpl@(uri.substring(0, index) + \\"%23\\")" shape=ellipse]
70 [label="21:CtExecutableReferenceImpl@substring(int)" shape=ellipse]
71 [label="21:CtVariableReadImpl@uri" shape=ellipse]
72 [label="21:CtVariableReadImpl@index" shape=ellipse]
73 [label="21:CtLiteralImpl@1" shape=ellipse]
74 [label="21:CtBinaryOperatorImpl@index + 1" shape=ellipse]
75 [label="21:CtInvocationImpl@uri.substring(index + 1)" shape=ellipse]
76 [label="21:CtBinaryOperatorImpl@(uri.substring(0, index) + \\"%23\\") + uri.substring(index + 1)" shape=ellipse]
77 [label="21:CtAssignmentImpl@uri = (uri.substring(0, index) + \\"%23\\") + uri.substring(index + 1)" shape=ellipse]
78 [label="20:CtBlockImpl@{\\r\\n    uri = (uri.substring(0, index) + \\"%23\\") + uri.substring(index + 1);\\r\\n}" shape=ellipse]
79 [label="20:CtForImpl@for (int index = uri.indexOf('#'); index != (-1); index = uri.indexOf('#')) {\\r\\n    uri = (uri.substring(0, index) + \\"%23\\") + uri.substring(index + 1);\\r\\n}" shape=ellipse]
80 [label="23:CtVariableWriteImpl@inputStream" shape=ellipse]
81 [label="23:CtVariableReadImpl@buildFile" shape=ellipse]
82 [label="23:CtConstructorCallImpl@new FileInputStream(buildFile)" shape=ellipse]
83 [label="23:CtAssignmentImpl@inputStream = new FileInputStream(buildFile)" shape=ellipse]
84 [label="24:CtVariableWriteImpl@inputSource" shape=ellipse]
85 [label="24:CtVariableReadImpl@inputStream" shape=ellipse]
86 [label="24:CtConstructorCallImpl@new InputSource(inputStream)" shape=ellipse]
87 [label="24:CtAssignmentImpl@inputSource = new InputSource(inputStream)" shape=ellipse]
88 [label="25:CtExecutableReferenceImpl@setSystemId(java.lang.String)" shape=ellipse]
89 [label="25:CtVariableReadImpl@inputSource" shape=ellipse]
90 [label="25:CtVariableReadImpl@uri" shape=ellipse]
91 [label="25:CtInvocationImpl@inputSource.setSystemId(uri)" shape=ellipse]
92 [label="26:CtExecutableReferenceImpl@log()" shape=ellipse]
93 [label="26:CtVariableReadImpl@project" shape=ellipse]
94 [label="26:CtLiteralImpl@\\"parsing buildfile \\"" shape=ellipse]
95 [label="26:CtVariableReadImpl@buildFile" shape=ellipse]
96 [label="26:CtBinaryOperatorImpl@(\\"parsing buildfile \\" + buildFile)" shape=ellipse]
97 [label="26:CtLiteralImpl@\\" with URI = \\"" shape=ellipse]
98 [label="26:CtBinaryOperatorImpl@((\\"parsing buildfile \\" + buildFile) + \\" with URI = \\")" shape=ellipse]
99 [label="26:CtVariableReadImpl@uri" shape=ellipse]
100 [label="26:CtBinaryOperatorImpl@((\\"parsing buildfile \\" + buildFile) + \\" with URI = \\") + uri" shape=ellipse]
101 [label="26:CtTypeAccessImpl@MSG_VERBOSE" shape=ellipse]
102 [label="26:CtInvocationImpl@project.log(((\\"parsing buildfile \\" + buildFile) + \\" with URI = \\") + uri, MSG_VERBOSE)" shape=ellipse]
103 [label="27:CtLocalVariableImpl@HandlerBase hb = new RootHandler()" shape=ellipse]
104 [label="28:CtExecutableReferenceImpl@setDocumentHandler(HandlerBase)" shape=ellipse]
105 [label="28:CtFieldReadImpl@parser" shape=ellipse]
106 [label="28:CtVariableReadImpl@hb" shape=ellipse]
107 [label="28:CtInvocationImpl@parser.setDocumentHandler(hb)" shape=ellipse]
108 [label="29:CtExecutableReferenceImpl@setEntityResolver(HandlerBase)" shape=ellipse]
109 [label="29:CtFieldReadImpl@parser" shape=ellipse]
110 [label="29:CtVariableReadImpl@hb" shape=ellipse]
111 [label="29:CtInvocationImpl@parser.setEntityResolver(hb)" shape=ellipse]
112 [label="30:CtExecutableReferenceImpl@setErrorHandler(HandlerBase)" shape=ellipse]
113 [label="30:CtFieldReadImpl@parser" shape=ellipse]
114 [label="30:CtVariableReadImpl@hb" shape=ellipse]
115 [label="30:CtInvocationImpl@parser.setErrorHandler(hb)" shape=ellipse]
116 [label="31:CtExecutableReferenceImpl@setDTDHandler(HandlerBase)" shape=ellipse]
117 [label="31:CtFieldReadImpl@parser" shape=ellipse]
118 [label="31:CtVariableReadImpl@hb" shape=ellipse]
119 [label="31:CtInvocationImpl@parser.setDTDHandler(hb)" shape=ellipse]
120 [label="32:CtExecutableReferenceImpl@parse(InputSource)" shape=ellipse]
121 [label="32:CtFieldReadImpl@parser" shape=ellipse]
122 [label="32:CtVariableReadImpl@inputSource" shape=ellipse]
123 [label="32:CtInvocationImpl@parser.parse(inputSource)" shape=ellipse]
124 [label="12:CtBlockImpl@{\\r\\n    SAXParser saxParser = getParserFactory().newSAXParser();\\r\\n    try {\\r\\n        parser = saxParser.getParser();\\r\\n    } catch (SAXException exc) {\\r\\n        parser = new XMLReaderAdapter(saxParser.getXMLReader());\\r\\n    }\\r\\n    String uri = \\"file:\\" + buildFile.getAbsolutePath().replace('\\', '/');\\r\\n    for (int index = uri.indexOf('#'); index != (-1); index = uri.indexOf('#')) {\\r\\n        uri = (uri.substring(0, index) + \\"%23\\") + uri.substring(index + 1);\\r\\n    }\\r\\n    inputStream = new FileInputStream(buildFile);\\r\\n    inputSource = new InputSource(inputStream);\\r\\n    inputSource.setSystemId(uri);\\r\\n    project.log(((\\"parsing buildfile \\" + buildFile) + \\" with URI = \\") + uri, MSG_VERBOSE);\\r\\n    HandlerBase hb = new RootHandler();\\r\\n    parser.setDocumentHandler(hb);\\r\\n    parser.setEntityResolver(hb);\\r\\n    parser.setErrorHandler(hb);\\r\\n    parser.setDTDHandler(hb);\\r\\n    parser.parse(inputSource);\\r\\n}" shape=ellipse]
125 [label="33:CtTypeReferenceImpl@ParserConfigurationException" shape=ellipse]
126 [label="33:CtCatchVariableImpl@ParserConfigurationException exc" shape=ellipse]
127 [label="34:CtLiteralImpl@\\"Parser has not been configured correctly\\"" shape=ellipse]
128 [label="34:CtVariableReadImpl@exc" shape=ellipse]
129 [label="34:CtConstructorCallImpl@new BuildException(\\"Parser has not been configured correctly\\", exc)" shape=ellipse]
130 [label="34:CtThrowImpl@throw new BuildException(\\"Parser has not been configured correctly\\", exc)" shape=ellipse]
131 [label="33:CtBlockImpl@{\\r\\n    throw new BuildException(\\"Parser has not been configured correctly\\", exc);\\r\\n}" shape=ellipse]
132 [label="33:CtCatchImpl@ catch (ParserConfigurationException exc) {\\r\\n    throw new BuildException(\\"Parser has not been configured correctly\\", exc);\\r\\n}" shape=ellipse]
133 [label="35:CtTypeReferenceImpl@SAXParseException" shape=ellipse]
134 [label="35:CtCatchVariableImpl@SAXParseException exc" shape=ellipse]
135 [label="36:CtLocalVariableImpl@Location location = new Location(buildFile.toString(), exc.getLineNumber(), exc.getColumnNumber())" shape=ellipse]
136 [label="38:CtLocalVariableImpl@Throwable t = exc.getException()" shape=ellipse]
137 [label="39:CtVariableReadImpl@t" shape=ellipse]
138 [label="39:CtTypeAccessImpl@BuildException" shape=ellipse]
139 [label="39:CtBinaryOperatorImpl@t instanceof BuildException" shape=ellipse]
140 [label="40:CtLocalVariableImpl@BuildException be = ((BuildException) (t))" shape=ellipse]
141 [label="41:CtExecutableReferenceImpl@getLocation()" shape=ellipse]
142 [label="41:CtVariableReadImpl@be" shape=ellipse]
143 [label="41:CtInvocationImpl@be.getLocation()" shape=ellipse]
144 [label="41:CtFieldReadImpl@Location.UNKNOWN_LOCATION" shape=ellipse]
145 [label="41:CtBinaryOperatorImpl@be.getLocation() == Location.UNKNOWN_LOCATION" shape=ellipse]
146 [label="42:CtExecutableReferenceImpl@setLocation(Location)" shape=ellipse]
147 [label="42:CtVariableReadImpl@be" shape=ellipse]
148 [label="42:CtVariableReadImpl@location" shape=ellipse]
149 [label="42:CtInvocationImpl@be.setLocation(location)" shape=ellipse]
150 [label="41:CtBlockImpl@{\\r\\n    be.setLocation(location);\\r\\n}" shape=ellipse]
151 [label="41:CtIfImpl@if (be.getLocation() == Location.UNKNOWN_LOCATION) {\\r\\n    be.setLocation(location);\\r\\n}" shape=ellipse]
152 [label="44:CtVariableReadImpl@be" shape=ellipse]
153 [label="44:CtThrowImpl@throw be" shape=ellipse]
154 [label="39:CtBlockImpl@{\\r\\n    BuildException be = ((BuildException) (t));\\r\\n    if (be.getLocation() == Location.UNKNOWN_LOCATION) {\\r\\n        be.setLocation(location);\\r\\n    }\\r\\n    throw be;\\r\\n}" shape=ellipse]
155 [label="39:CtIfImpl@if (t instanceof BuildException) {\\r\\n    BuildException be = ((BuildException) (t));\\r\\n    if (be.getLocation() == Location.UNKNOWN_LOCATION) {\\r\\n        be.setLocation(location);\\r\\n    }\\r\\n    throw be;\\r\\n}" shape=ellipse]
156 [label="46:CtExecutableReferenceImpl@getMessage()" shape=ellipse]
157 [label="46:CtVariableReadImpl@exc" shape=ellipse]
158 [label="46:CtInvocationImpl@exc.getMessage()" shape=ellipse]
159 [label="46:CtVariableReadImpl@t" shape=ellipse]
160 [label="46:CtVariableReadImpl@location" shape=ellipse]
161 [label="46:CtConstructorCallImpl@new BuildException(exc.getMessage(), t, location)" shape=ellipse]
162 [label="46:CtThrowImpl@throw new BuildException(exc.getMessage(), t, location)" shape=ellipse]
163 [label="35:CtBlockImpl@{\\r\\n    Location location = new Location(buildFile.toString(), exc.getLineNumber(), exc.getColumnNumber());\\r\\n    Throwable t = exc.getException();\\r\\n    if (t instanceof BuildException) {\\r\\n        BuildException be = ((BuildException) (t));\\r\\n        if (be.getLocation() == Location.UNKNOWN_LOCATION) {\\r\\n            be.setLocation(location);\\r\\n        }\\r\\n        throw be;\\r\\n    }\\r\\n    throw new BuildException(exc.getMessage(), t, location);\\r\\n}" shape=ellipse]
164 [label="35:CtCatchImpl@ catch (SAXParseException exc) {\\r\\n    Location location = new Location(buildFile.toString(), exc.getLineNumber(), exc.getColumnNumber());\\r\\n    Throwable t = exc.getException();\\r\\n    if (t instanceof BuildException) {\\r\\n        BuildException be = ((BuildException) (t));\\r\\n        if (be.getLocation() == Location.UNKNOWN_LOCATION) {\\r\\n            be.setLocation(location);\\r\\n        }\\r\\n        throw be;\\r\\n    }\\r\\n    throw new BuildException(exc.getMessage(), t, location);\\r\\n}" shape=ellipse]
165 [label="47:CtTypeReferenceImpl@SAXException" shape=ellipse]
166 [label="47:CtCatchVariableImpl@SAXException exc" shape=ellipse]
167 [label="48:CtLocalVariableImpl@Throwable t = exc.getException()" shape=ellipse]
168 [label="49:CtVariableReadImpl@t" shape=ellipse]
169 [label="49:CtTypeAccessImpl@BuildException" shape=ellipse]
170 [label="49:CtBinaryOperatorImpl@t instanceof BuildException" shape=ellipse]
171 [label="50:CtVariableReadImpl@((BuildException) (t))" shape=ellipse]
172 [label="50:CtThrowImpl@throw ((BuildException) (t))" shape=ellipse]
173 [label="49:CtBlockImpl@{\\r\\n    throw ((BuildException) (t));\\r\\n}" shape=ellipse]
174 [label="49:CtIfImpl@if (t instanceof BuildException) {\\r\\n    throw ((BuildException) (t));\\r\\n}" shape=ellipse]
175 [label="52:CtExecutableReferenceImpl@getMessage()" shape=ellipse]
176 [label="52:CtVariableReadImpl@exc" shape=ellipse]
177 [label="52:CtInvocationImpl@exc.getMessage()" shape=ellipse]
178 [label="52:CtVariableReadImpl@t" shape=ellipse]
179 [label="52:CtConstructorCallImpl@new BuildException(exc.getMessage(), t)" shape=ellipse]
180 [label="52:CtThrowImpl@throw new BuildException(exc.getMessage(), t)" shape=ellipse]
181 [label="47:CtBlockImpl@{\\r\\n    Throwable t = exc.getException();\\r\\n    if (t instanceof BuildException) {\\r\\n        throw ((BuildException) (t));\\r\\n    }\\r\\n    throw new BuildException(exc.getMessage(), t);\\r\\n}" shape=ellipse]
182 [label="47:CtCatchImpl@ catch (SAXException exc) {\\r\\n    Throwable t = exc.getException();\\r\\n    if (t instanceof BuildException) {\\r\\n        throw ((BuildException) (t));\\r\\n    }\\r\\n    throw new BuildException(exc.getMessage(), t);\\r\\n}" shape=ellipse]
183 [label="53:CtTypeReferenceImpl@FileNotFoundException" shape=ellipse]
184 [label="53:CtCatchVariableImpl@FileNotFoundException exc" shape=ellipse]
185 [label="54:CtVariableReadImpl@exc" shape=ellipse]
186 [label="54:CtConstructorCallImpl@new BuildException(exc)" shape=ellipse]
187 [label="54:CtThrowImpl@throw new BuildException(exc)" shape=ellipse]
188 [label="53:CtBlockImpl@{\\r\\n    throw new BuildException(exc);\\r\\n}" shape=ellipse]
189 [label="53:CtCatchImpl@ catch (FileNotFoundException exc) {\\r\\n    throw new BuildException(exc);\\r\\n}" shape=ellipse]
190 [label="55:CtTypeReferenceImpl@IOException" shape=ellipse]
191 [label="55:CtCatchVariableImpl@IOException exc" shape=ellipse]
192 [label="56:CtLiteralImpl@\\"Error reading project file\\"" shape=ellipse]
193 [label="56:CtVariableReadImpl@exc" shape=ellipse]
194 [label="56:CtConstructorCallImpl@new BuildException(\\"Error reading project file\\", exc)" shape=ellipse]
195 [label="56:CtThrowImpl@throw new BuildException(\\"Error reading project file\\", exc)" shape=ellipse]
196 [label="55:CtBlockImpl@{\\r\\n    throw new BuildException(\\"Error reading project file\\", exc);\\r\\n}" shape=ellipse]
197 [label="55:CtCatchImpl@ catch (IOException exc) {\\r\\n    throw new BuildException(\\"Error reading project file\\", exc);\\r\\n}" shape=ellipse]
198 [label="58:CtVariableReadImpl@inputStream" shape=ellipse]
199 [label="58:CtLiteralImpl@null" shape=ellipse]
200 [label="58:CtBinaryOperatorImpl@inputStream != null" shape=ellipse]
201 [label="60:CtExecutableReferenceImpl@close()" shape=ellipse]
202 [label="60:CtVariableReadImpl@inputStream" shape=ellipse]
203 [label="60:CtInvocationImpl@inputStream.close()" shape=ellipse]
204 [label="59:CtBlockImpl@{\\r\\n    inputStream.close();\\r\\n}" shape=ellipse]
205 [label="61:CtTypeReferenceImpl@IOException" shape=ellipse]
206 [label="61:CtCatchVariableImpl@IOException ioe" shape=ellipse]
207 [label="61:CtBlockImpl@{\\r\\n}" shape=ellipse]
208 [label="61:CtCatchImpl@ catch (IOException ioe) {\\r\\n}" shape=ellipse]
209 [label="59:CtTryImpl@try {\\r\\n    inputStream.close();\\r\\n} catch (IOException ioe) {\\r\\n}" shape=ellipse]
210 [label="58:CtBlockImpl@{\\r\\n    try {\\r\\n        inputStream.close();\\r\\n    } catch (IOException ioe) {\\r\\n    }\\r\\n}" shape=ellipse]
211 [label="58:CtIfImpl@if (inputStream != null) {\\r\\n    try {\\r\\n        inputStream.close();\\r\\n    } catch (IOException ioe) {\\r\\n    }\\r\\n}" shape=ellipse]
212 [label="57:CtBlockImpl@{\\r\\n    if (inputStream != null) {\\r\\n        try {\\r\\n            inputStream.close();\\r\\n        } catch (IOException ioe) {\\r\\n        }\\r\\n    }\\r\\n}" shape=ellipse]
213 [label="12:CtTryImpl@try {\\r\\n    SAXParser saxParser = getParserFactory().newSAXParser();\\r\\n    try {\\r\\n        parser = saxParser.getParser();\\r\\n    } catch (SAXException exc) {\\r\\n        parser = new XMLReaderAdapter(saxParser.getXMLReader());\\r\\n    }\\r\\n    String uri = \\"file:\\" + buildFile.getAbsolutePath().replace('\\', '/');\\r\\n    for (int index = uri.indexOf('#'); index != (-1); index = uri.indexOf('#')) {\\r\\n        uri = (uri.substring(0, index) + \\"%23\\") + uri.substring(index + 1);\\r\\n    }\\r\\n    inputStream = new FileInputStream(buildFile);\\r\\n    inputSource = new InputSource(inputStream);\\r\\n    inputSource.setSystemId(uri);\\r\\n    project.log(((\\"parsing buildfile \\" + buildFile) + \\" with URI = \\") + uri, MSG_VERBOSE);\\r\\n    HandlerBase hb = new RootHandler();\\r\\n    parser.setDocumentHandler(hb);\\r\\n    parser.setEntityResolver(hb);\\r\\n    parser.setErrorHandler(hb);\\r\\n    parser.setDTDHandler(hb);\\r\\n    parser.parse(inputSource);\\r\\n} catch (ParserConfigurationException exc) {\\r\\n    throw new BuildException(\\"Parser has not been configured correctly\\", exc);\\r\\n} catch (SAXParseException exc) {\\r\\n    Location location = new Location(buildFile.toString(), exc.getLineNumber(), exc.getColumnNumber());\\r\\n    Throwable t = exc.getException();\\r\\n    if (t instanceof BuildException) {\\r\\n        BuildException be = ((BuildException) (t));\\r\\n        if (be.getLocation() == Location.UNKNOWN_LOCATION) {\\r\\n            be.setLocation(location);\\r\\n        }\\r\\n        throw be;\\r\\n    }\\r\\n    throw new BuildException(exc.getMessage(), t, location);\\r\\n} catch (SAXException exc) {\\r\\n    Throwable t = exc.getException();\\r\\n    if (t instanceof BuildException) {\\r\\n        throw ((BuildException) (t));\\r\\n    }\\r\\n    throw new BuildException(exc.getMessage(), t);\\r\\n} catch (FileNotFoundException exc) {\\r\\n    throw new BuildException(exc);\\r\\n} catch (IOException exc) {\\r\\n    throw new BuildException(\\"Error reading project file\\", exc);\\r\\n} finally {\\r\\n    if (inputStream != null) {\\r\\n        try {\\r\\n            inputStream.close();\\r\\n        } catch (IOException ioe) {\\r\\n        }\\r\\n    }\\r\\n}" shape=ellipse]
214 [label="2:CtBlockImpl@{\\r\\n    if (!(source instanceof File)) {\\r\\n        throw new BuildException(\\"Only File source supported by default plugin\\");\\r\\n    }\\r\\n    File buildFile = ((File) (source));\\r\\n    FileInputStream inputStream = null;\\r\\n    InputSource inputSource = null;\\r\\n    this.project = project;\\r\\n    this.buildFile = new File(buildFile.getAbsolutePath());\\r\\n    buildFileParent = new File(this.buildFile.getParent());\\r\\n    try {\\r\\n        SAXParser saxParser = getParserFactory().newSAXParser();\\r\\n        try {\\r\\n            parser = saxParser.getParser();\\r\\n        } catch (SAXException exc) {\\r\\n            parser = new XMLReaderAdapter(saxParser.getXMLReader());\\r\\n        }\\r\\n        String uri = \\"file:\\" + buildFile.getAbsolutePath().replace('\\', '/');\\r\\n        for (int index = uri.indexOf('#'); index != (-1); index = uri.indexOf('#')) {\\r\\n            uri = (uri.substring(0, index) + \\"%23\\") + uri.substring(index + 1);\\r\\n        }\\r\\n        inputStream = new FileInputStream(buildFile);\\r\\n        inputSource = new InputSource(inputStream);\\r\\n        inputSource.setSystemId(uri);\\r\\n        project.log(((\\"parsing buildfile \\" + buildFile) + \\" with URI = \\") + uri, MSG_VERBOSE);\\r\\n        HandlerBase hb = new RootHandler();\\r\\n        parser.setDocumentHandler(hb);\\r\\n        parser.setEntityResolver(hb);\\r\\n        parser.setErrorHandler(hb);\\r\\n        parser.setDTDHandler(hb);\\r\\n        parser.parse(inputSource);\\r\\n    } catch (ParserConfigurationException exc) {\\r\\n        throw new BuildException(\\"Parser has not been configured correctly\\", exc);\\r\\n    } catch (SAXParseException exc) {\\r\\n        Location location = new Location(buildFile.toString(), exc.getLineNumber(), exc.getColumnNumber());\\r\\n        Throwable t = exc.getException();\\r\\n        if (t instanceof BuildException) {\\r\\n            BuildException be = ((BuildException) (t));\\r\\n            if (be.getLocation() == Location.UNKNOWN_LOCATION) {\\r\\n                be.setLocation(location);\\r\\n            }\\r\\n            throw be;\\r\\n        }\\r\\n        throw new BuildException(exc.getMessage(), t, location);\\r\\n    } catch (SAXException exc) {\\r\\n        Throwable t = exc.getException();\\r\\n        if (t instanceof BuildException) {\\r\\n            throw ((BuildException) (t));\\r\\n        }\\r\\n        throw new BuildException(exc.getMessage(), t);\\r\\n    } catch (FileNotFoundException exc) {\\r\\n        throw new BuildException(exc);\\r\\n    } catch (IOException exc) {\\r\\n        throw new BuildException(\\"Error reading project file\\", exc);\\r\\n    } finally {\\r\\n        if (inputStream != null) {\\r\\n            try {\\r\\n                inputStream.close();\\r\\n            } catch (IOException ioe) {\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}" shape=ellipse]
215 [label="2:CtMethodImpl@public void parse(Project project, Object source) throws BuildException {\\r\\n    if (!(source instanceof File)) {\\r\\n        throw new BuildException(\\"Only File source supported by default plugin\\");\\r\\n    }\\r\\n    File buildFile = ((File) (source));\\r\\n    FileInputStream inputStream = null;\\r\\n    InputSource inputSource = null;\\r\\n    this.project = project;\\r\\n    this.buildFile = new File(buildFile.getAbsolutePath());\\r\\n    buildFileParent = new File(this.buildFile.getParent());\\r\\n    try {\\r\\n        SAXParser saxParser = getParserFactory().newSAXParser();\\r\\n        try {\\r\\n            parser = saxParser.getParser();\\r\\n        } catch (SAXException exc) {\\r\\n            parser = new XMLReaderAdapter(saxParser.getXMLReader());\\r\\n        }\\r\\n        String uri = \\"file:\\" + buildFile.getAbsolutePath().replace('\\', '/');\\r\\n        for (int index = uri.indexOf('#'); index != (-1); index = uri.indexOf('#')) {\\r\\n            uri = (uri.substring(0, index) + \\"%23\\") + uri.substring(index + 1);\\r\\n        }\\r\\n        inputStream = new FileInputStream(buildFile);\\r\\n        inputSource = new InputSource(inputStream);\\r\\n        inputSource.setSystemId(uri);\\r\\n        project.log(((\\"parsing buildfile \\" + buildFile) + \\" with URI = \\") + uri, MSG_VERBOSE);\\r\\n        HandlerBase hb = new RootHandler();\\r\\n        parser.setDocumentHandler(hb);\\r\\n        parser.setEntityResolver(hb);\\r\\n        parser.setErrorHandler(hb);\\r\\n        parser.setDTDHandler(hb);\\r\\n        parser.parse(inputSource);\\r\\n    } catch (ParserConfigurationException exc) {\\r\\n        throw new BuildException(\\"Parser has not been configured correctly\\", exc);\\r\\n    } catch (SAXParseException exc) {\\r\\n        Location location = new Location(buildFile.toString(), exc.getLineNumber(), exc.getColumnNumber());\\r\\n        Throwable t = exc.getException();\\r\\n        if (t instanceof BuildException) {\\r\\n            BuildException be = ((BuildException) (t));\\r\\n            if (be.getLocation() == Location.UNKNOWN_LOCATION) {\\r\\n                be.setLocation(location);\\r\\n            }\\r\\n            throw be;\\r\\n        }\\r\\n        throw new BuildException(exc.getMessage(), t, location);\\r\\n    } catch (SAXException exc) {\\r\\n        Throwable t = exc.getException();\\r\\n        if (t instanceof BuildException) {\\r\\n            throw ((BuildException) (t));\\r\\n        }\\r\\n        throw new BuildException(exc.getMessage(), t);\\r\\n    } catch (FileNotFoundException exc) {\\r\\n        throw new BuildException(exc);\\r\\n    } catch (IOException exc) {\\r\\n        throw new BuildException(\\"Error reading project file\\", exc);\\r\\n    } finally {\\r\\n        if (inputStream != null) {\\r\\n            try {\\r\\n                inputStream.close();\\r\\n            } catch (IOException ioe) {\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}" shape=ellipse]
6 -> 4 [label=""];
6 -> 5 [label=""];
7 -> 6 [label=""];
7 -> 11 [label="Control Dep"];
7 -> 10 [label="Control Dep"];
7 -> 9 [label="Control Dep"];
7 -> 8 [label="Control Dep"];
9 -> 8 [label=""];
10 -> 9 [label=""];
11 -> 10 [label=""];
12 -> 7 [label=""];
12 -> 11 [label=""];
17 -> 16 [label="Data Dep"];
18 -> 16 [label=""];
18 -> 17 [label=""];
21 -> 19 [label="Data Dep"];
22 -> 21 [label=""];
22 -> 20 [label=""];
23 -> 22 [label=""];
24 -> 19 [label=""];
24 -> 23 [label=""];
28 -> 27 [label=""];
28 -> 25 [label="Data Dep"];
29 -> 28 [label=""];
29 -> 26 [label=""];
30 -> 29 [label=""];
31 -> 25 [label=""];
31 -> 30 [label=""];
35 -> 33 [label="Data Dep"];
36 -> 35 [label=""];
36 -> 34 [label=""];
37 -> 33 [label=""];
37 -> 36 [label=""];
38 -> 37 [label=""];
40 -> 39 [label=""];
40 -> 47 [label="Control Dep"];
40 -> 46 [label="Control Dep"];
40 -> 41 [label="Control Dep"];
40 -> 45 [label="Control Dep"];
40 -> 44 [label="Control Dep"];
40 -> 42 [label="Control Dep"];
40 -> 43 [label="Control Dep"];
41 -> 105 [label="Define-Use"];
41 -> 109 [label="Define-Use"];
41 -> 113 [label="Define-Use"];
41 -> 117 [label="Define-Use"];
41 -> 121 [label="Define-Use"];
43 -> 41 [label="Data Dep"];
44 -> 43 [label=""];
44 -> 42 [label=""];
45 -> 44 [label=""];
46 -> 41 [label=""];
46 -> 45 [label=""];
47 -> 46 [label=""];
48 -> 40 [label=""];
48 -> 47 [label=""];
49 -> 38 [label=""];
49 -> 48 [label=""];
54 -> 53 [label=""];
55 -> 52 [label=""];
55 -> 54 [label=""];
55 -> 78 [label="Control Dep"];
55 -> 77 [label="Control Dep"];
55 -> 62 [label="Control Dep"];
55 -> 76 [label="Control Dep"];
55 -> 69 [label="Control Dep"];
55 -> 67 [label="Control Dep"];
55 -> 63 [label="Control Dep"];
55 -> 64 [label="Control Dep"];
55 -> 65 [label="Control Dep"];
55 -> 66 [label="Control Dep"];
55 -> 68 [label="Control Dep"];
55 -> 75 [label="Control Dep"];
55 -> 70 [label="Control Dep"];
55 -> 71 [label="Control Dep"];
55 -> 74 [label="Control Dep"];
55 -> 72 [label="Control Dep"];
55 -> 73 [label="Control Dep"];
56 -> 66 [label="Define-Use"];
56 -> 72 [label="Define-Use"];
58 -> 56 [label="Data Dep"];
60 -> 58 [label=""];
60 -> 57 [label=""];
60 -> 59 [label=""];
61 -> 56 [label=""];
61 -> 60 [label=""];
62 -> 90 [label="Define-Use"];
62 -> 99 [label="Define-Use"];
64 -> 62 [label="Data Dep"];
66 -> 62 [label="Data Dep"];
67 -> 64 [label=""];
67 -> 63 [label=""];
67 -> 65 [label=""];
67 -> 66 [label=""];
69 -> 67 [label=""];
69 -> 68 [label=""];
71 -> 62 [label="Data Dep"];
72 -> 62 [label="Data Dep"];
74 -> 72 [label=""];
74 -> 73 [label=""];
75 -> 71 [label=""];
75 -> 70 [label=""];
75 -> 74 [label=""];
76 -> 69 [label=""];
76 -> 75 [label=""];
77 -> 62 [label=""];
77 -> 76 [label=""];
78 -> 77 [label=""];
79 -> 51 [label=""];
79 -> 55 [label=""];
79 -> 61 [label=""];
79 -> 78 [label=""];
80 -> 85 [label="Define-Use"];
80 -> 198 [label="Define-Use"];
80 -> 202 [label="Define-Use"];
81 -> 80 [label="Data Dep"];
82 -> 81 [label=""];
83 -> 80 [label=""];
83 -> 82 [label=""];
84 -> 89 [label="Define-Use"];
84 -> 122 [label="Define-Use"];
85 -> 84 [label="Data Dep"];
86 -> 85 [label=""];
87 -> 84 [label=""];
87 -> 86 [label=""];
91 -> 89 [label=""];
91 -> 88 [label=""];
91 -> 90 [label=""];
96 -> 94 [label=""];
96 -> 95 [label=""];
98 -> 96 [label=""];
98 -> 97 [label=""];
100 -> 98 [label=""];
100 -> 99 [label=""];
102 -> 93 [label=""];
102 -> 92 [label=""];
102 -> 100 [label=""];
102 -> 101 [label=""];
107 -> 105 [label=""];
107 -> 104 [label=""];
107 -> 106 [label=""];
111 -> 109 [label=""];
111 -> 108 [label=""];
111 -> 110 [label=""];
115 -> 113 [label=""];
115 -> 112 [label=""];
115 -> 114 [label=""];
119 -> 117 [label=""];
119 -> 116 [label=""];
119 -> 118 [label=""];
123 -> 121 [label=""];
123 -> 120 [label=""];
123 -> 122 [label=""];
124 -> 32 [label=""];
124 -> 49 [label=""];
124 -> 50 [label=""];
124 -> 79 [label=""];
124 -> 83 [label=""];
124 -> 87 [label=""];
124 -> 91 [label=""];
124 -> 102 [label=""];
124 -> 103 [label=""];
124 -> 107 [label=""];
124 -> 111 [label=""];
124 -> 115 [label=""];
124 -> 119 [label=""];
124 -> 123 [label=""];
126 -> 125 [label=""];
126 -> 131 [label="Control Dep"];
126 -> 130 [label="Control Dep"];
126 -> 129 [label="Control Dep"];
126 -> 127 [label="Control Dep"];
126 -> 128 [label="Control Dep"];
129 -> 127 [label=""];
129 -> 128 [label=""];
130 -> 129 [label=""];
131 -> 130 [label=""];
132 -> 126 [label=""];
132 -> 131 [label=""];
134 -> 133 [label=""];
134 -> 163 [label="Control Dep"];
134 -> 135 [label="Control Dep"];
134 -> 136 [label="Control Dep"];
134 -> 155 [label="Control Dep"];
134 -> 139 [label="Control Dep"];
134 -> 137 [label="Control Dep"];
134 -> 138 [label="Control Dep"];
134 -> 162 [label="Control Dep"];
134 -> 161 [label="Control Dep"];
134 -> 158 [label="Control Dep"];
134 -> 156 [label="Control Dep"];
134 -> 157 [label="Control Dep"];
134 -> 159 [label="Control Dep"];
134 -> 160 [label="Control Dep"];
139 -> 137 [label=""];
139 -> 138 [label=""];
139 -> 154 [label="Control Dep"];
139 -> 140 [label="Control Dep"];
139 -> 151 [label="Control Dep"];
139 -> 145 [label="Control Dep"];
139 -> 143 [label="Control Dep"];
139 -> 141 [label="Control Dep"];
139 -> 142 [label="Control Dep"];
139 -> 144 [label="Control Dep"];
139 -> 153 [label="Control Dep"];
139 -> 152 [label="Control Dep"];
143 -> 142 [label=""];
143 -> 141 [label=""];
145 -> 143 [label=""];
145 -> 144 [label=""];
145 -> 150 [label="Control Dep"];
145 -> 149 [label="Control Dep"];
145 -> 146 [label="Control Dep"];
145 -> 147 [label="Control Dep"];
145 -> 148 [label="Control Dep"];
149 -> 147 [label=""];
149 -> 146 [label=""];
149 -> 148 [label=""];
150 -> 149 [label=""];
151 -> 145 [label=""];
151 -> 150 [label=""];
153 -> 152 [label=""];
154 -> 140 [label=""];
154 -> 151 [label=""];
154 -> 153 [label=""];
155 -> 139 [label=""];
155 -> 154 [label=""];
158 -> 157 [label=""];
158 -> 156 [label=""];
161 -> 158 [label=""];
161 -> 159 [label=""];
161 -> 160 [label=""];
162 -> 161 [label=""];
163 -> 135 [label=""];
163 -> 136 [label=""];
163 -> 155 [label=""];
163 -> 162 [label=""];
164 -> 134 [label=""];
164 -> 163 [label=""];
166 -> 165 [label=""];
166 -> 181 [label="Control Dep"];
166 -> 167 [label="Control Dep"];
166 -> 174 [label="Control Dep"];
166 -> 170 [label="Control Dep"];
166 -> 168 [label="Control Dep"];
166 -> 169 [label="Control Dep"];
166 -> 180 [label="Control Dep"];
166 -> 179 [label="Control Dep"];
166 -> 177 [label="Control Dep"];
166 -> 175 [label="Control Dep"];
166 -> 176 [label="Control Dep"];
166 -> 178 [label="Control Dep"];
170 -> 168 [label=""];
170 -> 169 [label=""];
170 -> 173 [label="Control Dep"];
170 -> 172 [label="Control Dep"];
170 -> 171 [label="Control Dep"];
172 -> 171 [label=""];
173 -> 172 [label=""];
174 -> 170 [label=""];
174 -> 173 [label=""];
177 -> 176 [label=""];
177 -> 175 [label=""];
179 -> 177 [label=""];
179 -> 178 [label=""];
180 -> 179 [label=""];
181 -> 167 [label=""];
181 -> 174 [label=""];
181 -> 180 [label=""];
182 -> 166 [label=""];
182 -> 181 [label=""];
184 -> 183 [label=""];
184 -> 188 [label="Control Dep"];
184 -> 187 [label="Control Dep"];
184 -> 186 [label="Control Dep"];
184 -> 185 [label="Control Dep"];
186 -> 185 [label=""];
187 -> 186 [label=""];
188 -> 187 [label=""];
189 -> 184 [label=""];
189 -> 188 [label=""];
191 -> 190 [label=""];
191 -> 196 [label="Control Dep"];
191 -> 195 [label="Control Dep"];
191 -> 194 [label="Control Dep"];
191 -> 192 [label="Control Dep"];
191 -> 193 [label="Control Dep"];
194 -> 192 [label=""];
194 -> 193 [label=""];
195 -> 194 [label=""];
196 -> 195 [label=""];
197 -> 191 [label=""];
197 -> 196 [label=""];
200 -> 198 [label=""];
200 -> 199 [label=""];
200 -> 210 [label="Control Dep"];
200 -> 209 [label="Control Dep"];
200 -> 204 [label="Control Dep"];
200 -> 203 [label="Control Dep"];
200 -> 201 [label="Control Dep"];
200 -> 202 [label="Control Dep"];
200 -> 208 [label="Control Dep"];
200 -> 206 [label="Control Dep"];
203 -> 202 [label=""];
203 -> 201 [label=""];
204 -> 203 [label=""];
206 -> 205 [label=""];
206 -> 207 [label="Control Dep"];
208 -> 206 [label=""];
208 -> 207 [label=""];
209 -> 204 [label=""];
209 -> 208 [label=""];
210 -> 209 [label=""];
211 -> 200 [label=""];
211 -> 210 [label=""];
212 -> 211 [label=""];
213 -> 124 [label=""];
213 -> 132 [label=""];
213 -> 164 [label=""];
213 -> 182 [label=""];
213 -> 189 [label=""];
213 -> 197 [label=""];
213 -> 212 [label=""];
214 -> 12 [label=""];
214 -> 13 [label=""];
214 -> 14 [label=""];
214 -> 15 [label=""];
214 -> 18 [label=""];
214 -> 24 [label=""];
214 -> 31 [label=""];
214 -> 213 [label=""];
215 -> 0 [label=""];
215 -> 1 [label=""];
215 -> 2 [label=""];
215 -> 3 [label=""];
215 -> 214 [label=""];
}