{
	"/Users/yumeng/JavaProjects/FixGen/data/d4j-info-2.0/buggy_fix/buggy/math/math_71_buggy/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java":[
		{
			"vertexes":[
				3710,
				972,
				961,
				973
			],
			"edges":[
				[
					"",
					"Action",
					"",
					""
				],
				[
					"Action",
					"",
					"Control Dep",
					"AST"
				],
				[
					"",
					"Control Dep",
					"",
					"Control Dep"
				],
				[
					"",
					"AST",
					"Control Dep",
					""
				]
			],
			"vertex_label":[
				1,
				1,
				1,
				1
			],
			"attribute_label":[
				{
					"3710":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"972":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"961":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"973":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				}
			],
			"attributes":[
				{
					"3710":{
						"locationInParent":"ACTION",
						"value2":"",
						"valueType":"no type",
						"nodeType":"class model.actions.Delete",
						"value":"DELETE"
					}
				},
				{
					"972":{
						"locationInParent":"STATEMENT",
						"value2":"// we cannot simply truncate the step, reject the current computation\n// and let the loop compute another state with the truncated step.\n// it is so small (much probably exactly 0 due to limited accuracy)\n// that the code above would fail handling it.\n// So we set up an artificial 0 size step by copying states\nboolean = java.lang.Boolean",
						"valueType":"boolean",
						"nodeType":"class spoon.support.reflect.code.CtAssignmentImpl",
						"value":"// we cannot simply truncate the step, reject the current computation\n// and let the loop compute another state with the truncated step.\n// it is so small (much probably exactly 0 due to limited accuracy)\n// that the code above would fail handling it.\n// So we set up an artificial 0 size step by copying states\nloop = false"
					}
				},
				{
					"961":{
						"locationInParent":"CONDITION",
						"value2":"java.lang.Math.abs(double) <= java.lang.Math.ulp(org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator)",
						"valueType":"null type",
						"nodeType":"class spoon.support.reflect.code.CtBinaryOperatorImpl",
						"value":"Math.abs(dt) <= Math.ulp(stepStart)"
					}
				},
				{
					"973":{
						"locationInParent":"THEN",
						"value2":"{\n    // we cannot simply truncate the step, reject the current computation\n    // and let the loop compute another state with the truncated step.\n    // it is so small (much probably exactly 0 due to limited accuracy)\n    // that the code above would fail handling it.\n    // So we set up an artificial 0 size step by copying states\n    boolean = java.lang.Boolean;\n}",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtBlockImpl",
						"value":"{\n    // we cannot simply truncate the step, reject the current computation\n    // and let the loop compute another state with the truncated step.\n    // it is so small (much probably exactly 0 due to limited accuracy)\n    // that the code above would fail handling it.\n    // So we set up an artificial 0 size step by copying states\n    loop = false;\n}"
					}
				}
			],
			"edge_label":[
				[
					0,
					1,
					0,
					0
				],
				[
					1,
					0,
					1,
					1
				],
				[
					0,
					1,
					0,
					1
				],
				[
					0,
					1,
					1,
					0
				]
			]
		},
		{
			"vertexes":[
				3711,
				973,
				961,
				982,
				972,
				3715,
				3714,
				3713,
				3712,
				3718,
				3717,
				3716,
				3722,
				3721,
				3720,
				3719,
				3728,
				3729,
				3723,
				3724,
				3725,
				3726,
				3727
			],
			"edges":[
				[
					"",
					"Action",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"Action",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"Action",
					"",
					"Control Dep",
					"AST",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"Control Dep",
					"",
					"AST",
					"Control Dep",
					"Control Dep",
					"",
					"",
					"",
					"Control Dep",
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"AST",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"AST",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"Action",
					"",
					"Control Dep",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"AST",
					"AST",
					"AST",
					"AST",
					"AST",
					"AST"
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					""
				]
			],
			"vertex_label":[
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1
			],
			"attribute_label":[
				{
					"3711":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"973":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"961":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"982":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"972":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3715":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3714":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3713":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3712":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3718":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3717":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3716":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3722":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3721":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3720":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3719":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3728":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3729":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3723":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3724":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3725":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3726":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3727":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				}
			],
			"attributes":[
				{
					"3711":{
						"locationInParent":"ACTION",
						"value2":"",
						"valueType":"no type",
						"nodeType":"class model.actions.Insert",
						"value":"INSERT"
					}
				},
				{
					"973":{
						"locationInParent":"THEN",
						"value2":"{\n    // we cannot simply truncate the step, reject the current computation\n    // and let the loop compute another state with the truncated step.\n    // it is so small (much probably exactly 0 due to limited accuracy)\n    // that the code above would fail handling it.\n    // So we set up an artificial 0 size step by copying states\n    boolean = java.lang.Boolean;\n}",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtBlockImpl",
						"value":"{\n    // we cannot simply truncate the step, reject the current computation\n    // and let the loop compute another state with the truncated step.\n    // it is so small (much probably exactly 0 due to limited accuracy)\n    // that the code above would fail handling it.\n    // So we set up an artificial 0 size step by copying states\n    loop = false;\n}"
					}
				},
				{
					"961":{
						"locationInParent":"CONDITION",
						"value2":"java.lang.Math.abs(double) <= java.lang.Math.ulp(org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator)",
						"valueType":"null type",
						"nodeType":"class spoon.support.reflect.code.CtBinaryOperatorImpl",
						"value":"Math.abs(dt) <= Math.ulp(stepStart)"
					}
				},
				{
					"982":{
						"locationInParent":"STATEMENT",
						"value2":"if (java.lang.Math.abs(double) <= java.lang.Math.ulp(org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator)) {\n    // we cannot simply truncate the step, reject the current computation\n    // and let the loop compute another state with the truncated step.\n    // it is so small (much probably exactly 0 due to limited accuracy)\n    // that the code above would fail handling it.\n    // So we set up an artificial 0 size step by copying states\n    boolean = java.lang.Boolean;\n} else {\n    // reject the step to match exactly the next switch time\n    double = double;\n}",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtIfImpl",
						"value":"if (Math.abs(dt) <= Math.ulp(stepStart)) {\n    // we cannot simply truncate the step, reject the current computation\n    // and let the loop compute another state with the truncated step.\n    // it is so small (much probably exactly 0 due to limited accuracy)\n    // that the code above would fail handling it.\n    // So we set up an artificial 0 size step by copying states\n    loop = false;\n} else {\n    // reject the step to match exactly the next switch time\n    hNew = dt;\n}"
					}
				},
				{
					"972":{
						"locationInParent":"STATEMENT",
						"value2":"// we cannot simply truncate the step, reject the current computation\n// and let the loop compute another state with the truncated step.\n// it is so small (much probably exactly 0 due to limited accuracy)\n// that the code above would fail handling it.\n// So we set up an artificial 0 size step by copying states\nboolean = java.lang.Boolean",
						"valueType":"boolean",
						"nodeType":"class spoon.support.reflect.code.CtAssignmentImpl",
						"value":"// we cannot simply truncate the step, reject the current computation\n// and let the loop compute another state with the truncated step.\n// it is so small (much probably exactly 0 due to limited accuracy)\n// that the code above would fail handling it.\n// So we set up an artificial 0 size step by copying states\nloop = false"
					}
				},
				{
					"3715":{
						"locationInParent":"TARGET",
						"value2":"org.apache.commons.math.ode.sampling.AbstractStepInterpolator",
						"valueType":"org.apache.commons.math.ode.sampling.AbstractStepInterpolator",
						"nodeType":"class spoon.support.reflect.code.CtVariableReadImpl",
						"value":"interpolator"
					}
				},
				{
					"3714":{
						"locationInParent":"VARIABLE",
						"value2":"org.apache.commons.math.ode.sampling.AbstractStepInterpolator",
						"valueType":"org.apache.commons.math.ode.sampling.AbstractStepInterpolator",
						"nodeType":"class spoon.support.reflect.reference.CtLocalVariableReferenceImpl",
						"value":"interpolator"
					}
				},
				{
					"3713":{
						"locationInParent":"TYPE",
						"value2":"org.apache.commons.math.ode.sampling.AbstractStepInterpolator",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"AbstractStepInterpolator"
					}
				},
				{
					"3712":{
						"locationInParent":"PACKAGE_REF",
						"value2":"org.apache.commons.math.ode.sampling",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtPackageReferenceImpl",
						"value":"org.apache.commons.math.ode.sampling"
					}
				},
				{
					"3718":{
						"locationInParent":"EXECUTABLE_REF",
						"value2":"storeTime",
						"valueType":"null type",
						"nodeType":"class spoon.support.reflect.reference.CtExecutableReferenceImpl",
						"value":"storeTime"
					}
				},
				{
					"3717":{
						"locationInParent":"DECLARING_TYPE",
						"value2":"org.apache.commons.math.ode.sampling.AbstractStepInterpolator",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"AbstractStepInterpolator"
					}
				},
				{
					"3716":{
						"locationInParent":"PACKAGE_REF",
						"value2":"org.apache.commons.math.ode.sampling",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtPackageReferenceImpl",
						"value":"org.apache.commons.math.ode.sampling"
					}
				},
				{
					"3722":{
						"locationInParent":"ARGUMENT",
						"value2":"org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
						"valueType":"org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
						"nodeType":"class spoon.support.reflect.code.CtFieldReadImpl",
						"value":"stepStart"
					}
				},
				{
					"3721":{
						"locationInParent":"VARIABLE",
						"value2":"org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
						"valueType":"org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
						"nodeType":"class spoon.support.reflect.reference.CtFieldReferenceImpl",
						"value":"stepStart"
					}
				},
				{
					"3720":{
						"locationInParent":"TYPE",
						"value2":"org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"EmbeddedRungeKuttaIntegrator"
					}
				},
				{
					"3719":{
						"locationInParent":"PACKAGE_REF",
						"value2":"org.apache.commons.math.ode.nonstiff",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtPackageReferenceImpl",
						"value":"org.apache.commons.math.ode.nonstiff"
					}
				},
				{
					"3728":{
						"locationInParent":"STATEMENT",
						"value2":"// we cannot simply truncate the step, reject the current computation\n// and let the loop compute another state with the truncated step.\n// it is so small (much probably exactly 0 due to limited accuracy)\n// that the code above would fail handling it.\n// So we set up an artificial 0 size step by copying states\norg.apache.commons.math.ode.sampling.AbstractStepInterpolator.storeTime(org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator)",
						"valueType":"null type",
						"nodeType":"class spoon.support.reflect.code.CtInvocationImpl",
						"value":"// we cannot simply truncate the step, reject the current computation\n// and let the loop compute another state with the truncated step.\n// it is so small (much probably exactly 0 due to limited accuracy)\n// that the code above would fail handling it.\n// So we set up an artificial 0 size step by copying states\ninterpolator.storeTime(stepStart)"
					}
				},
				{
					"3729":{
						"locationInParent":"METHOD_NAME",
						"value2":"storeTime",
						"valueType":"no type",
						"nodeType":"class codegraph.CtVirtualElement",
						"value":"storeTime"
					}
				},
				{
					"3723":{
						"locationInParent":"COMMENT",
						"value2":"// we cannot simply truncate the step, reject the current computation",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtCommentImpl",
						"value":"// we cannot simply truncate the step, reject the current computation"
					}
				},
				{
					"3724":{
						"locationInParent":"COMMENT",
						"value2":"// and let the loop compute another state with the truncated step.",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtCommentImpl",
						"value":"// and let the loop compute another state with the truncated step."
					}
				},
				{
					"3725":{
						"locationInParent":"COMMENT",
						"value2":"// it is so small (much probably exactly 0 due to limited accuracy)",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtCommentImpl",
						"value":"// it is so small (much probably exactly 0 due to limited accuracy)"
					}
				},
				{
					"3726":{
						"locationInParent":"COMMENT",
						"value2":"// that the code above would fail handling it.",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtCommentImpl",
						"value":"// that the code above would fail handling it."
					}
				},
				{
					"3727":{
						"locationInParent":"COMMENT",
						"value2":"// So we set up an artificial 0 size step by copying states",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtCommentImpl",
						"value":"// So we set up an artificial 0 size step by copying states"
					}
				}
			],
			"edge_label":[
				[
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					1,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					1,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					1,
					0,
					0,
					1,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					1,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					1,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					1,
					0,
					1,
					0,
					0,
					1,
					0,
					0,
					0,
					1,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					1,
					1,
					1,
					1,
					1,
					1
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0
				]
			]
		},
		{
			"vertexes":[
				3730,
				973,
				961,
				982,
				3733,
				3732,
				3731,
				3744,
				3735,
				3734,
				3736,
				3738,
				3737,
				3739,
				3741,
				3740,
				3742,
				3743,
				3748,
				3747,
				3746,
				3745,
				3750,
				3749,
				3754,
				3753,
				3752,
				3751,
				3756,
				3755,
				3764,
				3760,
				3759,
				3758,
				3757,
				3763,
				3761,
				3762,
				3765,
				3766
			],
			"edges":[
				[
					"",
					"Action",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"Action",
					""
				],
				[
					"Action",
					"",
					"Control Dep",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"Control Dep",
					"",
					"AST",
					"Control Dep",
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"Control Dep",
					"",
					"Control Dep",
					"",
					"",
					"",
					"Control Dep",
					"",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"Control Dep",
					""
				],
				[
					"",
					"AST",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"Control Dep",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					""
				],
				[
					"",
					"",
					"",
					"",
					"AST",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"AST",
					"AST",
					"",
					"AST",
					"AST",
					"",
					"AST",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"AST",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"AST",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"AST",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					""
				],
				[
					"Action",
					"",
					"Control Dep",
					"",
					"AST",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"AST",
					"",
					"AST",
					"",
					"",
					"",
					"AST",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST"
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					""
				]
			],
			"vertex_label":[
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1
			],
			"attribute_label":[
				{
					"3730":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"973":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"961":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"982":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3733":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3732":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3731":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3744":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3735":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3734":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3736":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3738":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3737":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3739":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3741":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3740":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3742":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3743":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3748":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3747":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3746":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3745":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3750":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3749":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3754":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3753":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3752":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3751":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3756":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3755":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3764":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3760":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3759":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3758":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3757":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3763":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3761":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3762":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3765":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3766":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				}
			],
			"attributes":[
				{
					"3730":{
						"locationInParent":"ACTION",
						"value2":"",
						"valueType":"no type",
						"nodeType":"class model.actions.Insert",
						"value":"INSERT"
					}
				},
				{
					"973":{
						"locationInParent":"THEN",
						"value2":"{\n    // we cannot simply truncate the step, reject the current computation\n    // and let the loop compute another state with the truncated step.\n    // it is so small (much probably exactly 0 due to limited accuracy)\n    // that the code above would fail handling it.\n    // So we set up an artificial 0 size step by copying states\n    boolean = java.lang.Boolean;\n}",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtBlockImpl",
						"value":"{\n    // we cannot simply truncate the step, reject the current computation\n    // and let the loop compute another state with the truncated step.\n    // it is so small (much probably exactly 0 due to limited accuracy)\n    // that the code above would fail handling it.\n    // So we set up an artificial 0 size step by copying states\n    loop = false;\n}"
					}
				},
				{
					"961":{
						"locationInParent":"CONDITION",
						"value2":"java.lang.Math.abs(double) <= java.lang.Math.ulp(org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator)",
						"valueType":"null type",
						"nodeType":"class spoon.support.reflect.code.CtBinaryOperatorImpl",
						"value":"Math.abs(dt) <= Math.ulp(stepStart)"
					}
				},
				{
					"982":{
						"locationInParent":"STATEMENT",
						"value2":"if (java.lang.Math.abs(double) <= java.lang.Math.ulp(org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator)) {\n    // we cannot simply truncate the step, reject the current computation\n    // and let the loop compute another state with the truncated step.\n    // it is so small (much probably exactly 0 due to limited accuracy)\n    // that the code above would fail handling it.\n    // So we set up an artificial 0 size step by copying states\n    boolean = java.lang.Boolean;\n} else {\n    // reject the step to match exactly the next switch time\n    double = double;\n}",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtIfImpl",
						"value":"if (Math.abs(dt) <= Math.ulp(stepStart)) {\n    // we cannot simply truncate the step, reject the current computation\n    // and let the loop compute another state with the truncated step.\n    // it is so small (much probably exactly 0 due to limited accuracy)\n    // that the code above would fail handling it.\n    // So we set up an artificial 0 size step by copying states\n    loop = false;\n} else {\n    // reject the step to match exactly the next switch time\n    hNew = dt;\n}"
					}
				},
				{
					"3733":{
						"locationInParent":"TARGET",
						"value2":"java.lang.System",
						"valueType":"void",
						"nodeType":"class spoon.support.reflect.code.CtTypeAccessImpl",
						"value":"System"
					}
				},
				{
					"3732":{
						"locationInParent":"ACCESSED_TYPE",
						"value2":"java.lang.System",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"System"
					}
				},
				{
					"3731":{
						"locationInParent":"PACKAGE_REF",
						"value2":"java.lang",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtPackageReferenceImpl",
						"value":"java.lang"
					}
				},
				{
					"3744":{
						"locationInParent":"EXECUTABLE_REF",
						"value2":"arraycopy",
						"valueType":"void",
						"nodeType":"class spoon.support.reflect.reference.CtExecutableReferenceImpl",
						"value":"arraycopy"
					}
				},
				{
					"3735":{
						"locationInParent":"DECLARING_TYPE",
						"value2":"java.lang.System",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"System"
					}
				},
				{
					"3734":{
						"locationInParent":"PACKAGE_REF",
						"value2":"java.lang",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtPackageReferenceImpl",
						"value":"java.lang"
					}
				},
				{
					"3736":{
						"locationInParent":"TYPE",
						"value2":"void",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"void"
					}
				},
				{
					"3738":{
						"locationInParent":"ARGUMENT_TYPE",
						"value2":"java.lang.Object",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"Object"
					}
				},
				{
					"3737":{
						"locationInParent":"PACKAGE_REF",
						"value2":"java.lang",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtPackageReferenceImpl",
						"value":"java.lang"
					}
				},
				{
					"3739":{
						"locationInParent":"ARGUMENT_TYPE",
						"value2":"int",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"int"
					}
				},
				{
					"3741":{
						"locationInParent":"ARGUMENT_TYPE",
						"value2":"java.lang.Object",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"Object"
					}
				},
				{
					"3740":{
						"locationInParent":"PACKAGE_REF",
						"value2":"java.lang",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtPackageReferenceImpl",
						"value":"java.lang"
					}
				},
				{
					"3742":{
						"locationInParent":"ARGUMENT_TYPE",
						"value2":"int",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"int"
					}
				},
				{
					"3743":{
						"locationInParent":"ARGUMENT_TYPE",
						"value2":"int",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"int"
					}
				},
				{
					"3748":{
						"locationInParent":"ARGUMENT",
						"value2":"double[]",
						"valueType":"double[]",
						"nodeType":"class spoon.support.reflect.code.CtVariableReadImpl",
						"value":"y"
					}
				},
				{
					"3747":{
						"locationInParent":"VARIABLE",
						"value2":"double[]",
						"valueType":"double[]",
						"nodeType":"class spoon.support.reflect.reference.CtParameterReferenceImpl",
						"value":"y"
					}
				},
				{
					"3746":{
						"locationInParent":"TYPE",
						"value2":"double[]",
						"valueType":"double",
						"nodeType":"class spoon.support.reflect.reference.CtArrayTypeReferenceImpl",
						"value":"double[]"
					}
				},
				{
					"3745":{
						"locationInParent":"TYPE",
						"value2":"double",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"double"
					}
				},
				{
					"3750":{
						"locationInParent":"ARGUMENT",
						"value2":"java.lang.Integer",
						"valueType":"int",
						"nodeType":"class spoon.support.reflect.code.CtLiteralImpl",
						"value":"0"
					}
				},
				{
					"3749":{
						"locationInParent":"TYPE",
						"value2":"int",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"int"
					}
				},
				{
					"3754":{
						"locationInParent":"ARGUMENT",
						"value2":"double[]",
						"valueType":"double[]",
						"nodeType":"class spoon.support.reflect.code.CtVariableReadImpl",
						"value":"yTmp"
					}
				},
				{
					"3753":{
						"locationInParent":"VARIABLE",
						"value2":"double[]",
						"valueType":"double[]",
						"nodeType":"class spoon.support.reflect.reference.CtLocalVariableReferenceImpl",
						"value":"yTmp"
					}
				},
				{
					"3752":{
						"locationInParent":"TYPE",
						"value2":"double[]",
						"valueType":"double",
						"nodeType":"class spoon.support.reflect.reference.CtArrayTypeReferenceImpl",
						"value":"double[]"
					}
				},
				{
					"3751":{
						"locationInParent":"TYPE",
						"value2":"double",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"double"
					}
				},
				{
					"3756":{
						"locationInParent":"ARGUMENT",
						"value2":"java.lang.Integer",
						"valueType":"int",
						"nodeType":"class spoon.support.reflect.code.CtLiteralImpl",
						"value":"0"
					}
				},
				{
					"3755":{
						"locationInParent":"TYPE",
						"value2":"int",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"int"
					}
				},
				{
					"3764":{
						"locationInParent":"ARGUMENT",
						"value2":"double[].int",
						"valueType":"int",
						"nodeType":"class spoon.support.reflect.code.CtFieldReadImpl",
						"value":"y0.length"
					}
				},
				{
					"3760":{
						"locationInParent":"TARGET",
						"value2":"double[]",
						"valueType":"double[]",
						"nodeType":"class spoon.support.reflect.code.CtVariableReadImpl",
						"value":"y0"
					}
				},
				{
					"3759":{
						"locationInParent":"VARIABLE",
						"value2":"double[]",
						"valueType":"double[]",
						"nodeType":"class spoon.support.reflect.reference.CtParameterReferenceImpl",
						"value":"y0"
					}
				},
				{
					"3758":{
						"locationInParent":"TYPE",
						"value2":"double[]",
						"valueType":"double",
						"nodeType":"class spoon.support.reflect.reference.CtArrayTypeReferenceImpl",
						"value":"double[]"
					}
				},
				{
					"3757":{
						"locationInParent":"TYPE",
						"value2":"double",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"double"
					}
				},
				{
					"3763":{
						"locationInParent":"VARIABLE",
						"value2":"int",
						"valueType":"int",
						"nodeType":"class spoon.support.reflect.reference.CtFieldReferenceImpl",
						"value":"length"
					}
				},
				{
					"3761":{
						"locationInParent":"DECLARING_TYPE",
						"value2":"int",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"int"
					}
				},
				{
					"3762":{
						"locationInParent":"TYPE",
						"value2":"int",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"int"
					}
				},
				{
					"3765":{
						"locationInParent":"STATEMENT",
						"value2":"java.lang.System.arraycopy(double[], java.lang.Integer, double[], java.lang.Integer, double[].int)",
						"valueType":"void",
						"nodeType":"class spoon.support.reflect.code.CtInvocationImpl",
						"value":"System.arraycopy(y, 0, yTmp, 0, y0.length)"
					}
				},
				{
					"3766":{
						"locationInParent":"METHOD_NAME",
						"value2":"arraycopy",
						"valueType":"no type",
						"nodeType":"class codegraph.CtVirtualElement",
						"value":"arraycopy"
					}
				}
			],
			"edge_label":[
				[
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0
				],
				[
					1,
					0,
					1,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					1,
					0,
					1,
					1,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0
				],
				[
					0,
					1,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					1,
					0,
					1,
					1,
					0,
					1,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					1,
					0,
					0,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					1,
					1,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0
				],
				[
					1,
					0,
					1,
					0,
					1,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0
				]
			]
		},
		{
			"vertexes":[
				3767,
				973,
				961,
				982,
				3771,
				3770,
				3769,
				3773,
				3772,
				3774,
				3768
			],
			"edges":[
				[
					"",
					"Action",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"Action",
					""
				],
				[
					"Action",
					"",
					"Control Dep",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"Control Dep",
					"",
					"AST",
					"Control Dep",
					"",
					"",
					"Control Dep",
					"",
					"Control Dep",
					""
				],
				[
					"",
					"AST",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"Control Dep",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"AST",
					""
				],
				[
					"",
					"",
					"",
					"",
					"AST",
					"",
					"AST",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"AST",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					""
				],
				[
					"Action",
					"",
					"Control Dep",
					"",
					"AST",
					"",
					"",
					"AST",
					"",
					"",
					"AST"
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					""
				]
			],
			"vertex_label":[
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1
			],
			"attribute_label":[
				{
					"3767":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"973":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"961":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"982":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3771":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3770":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3769":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3773":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3772":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3774":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3768":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				}
			],
			"attributes":[
				{
					"3767":{
						"locationInParent":"ACTION",
						"value2":"",
						"valueType":"no type",
						"nodeType":"class model.actions.Insert",
						"value":"INSERT"
					}
				},
				{
					"973":{
						"locationInParent":"THEN",
						"value2":"{\n    // we cannot simply truncate the step, reject the current computation\n    // and let the loop compute another state with the truncated step.\n    // it is so small (much probably exactly 0 due to limited accuracy)\n    // that the code above would fail handling it.\n    // So we set up an artificial 0 size step by copying states\n    boolean = java.lang.Boolean;\n}",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtBlockImpl",
						"value":"{\n    // we cannot simply truncate the step, reject the current computation\n    // and let the loop compute another state with the truncated step.\n    // it is so small (much probably exactly 0 due to limited accuracy)\n    // that the code above would fail handling it.\n    // So we set up an artificial 0 size step by copying states\n    loop = false;\n}"
					}
				},
				{
					"961":{
						"locationInParent":"CONDITION",
						"value2":"java.lang.Math.abs(double) <= java.lang.Math.ulp(org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator)",
						"valueType":"null type",
						"nodeType":"class spoon.support.reflect.code.CtBinaryOperatorImpl",
						"value":"Math.abs(dt) <= Math.ulp(stepStart)"
					}
				},
				{
					"982":{
						"locationInParent":"STATEMENT",
						"value2":"if (java.lang.Math.abs(double) <= java.lang.Math.ulp(org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator)) {\n    // we cannot simply truncate the step, reject the current computation\n    // and let the loop compute another state with the truncated step.\n    // it is so small (much probably exactly 0 due to limited accuracy)\n    // that the code above would fail handling it.\n    // So we set up an artificial 0 size step by copying states\n    boolean = java.lang.Boolean;\n} else {\n    // reject the step to match exactly the next switch time\n    double = double;\n}",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtIfImpl",
						"value":"if (Math.abs(dt) <= Math.ulp(stepStart)) {\n    // we cannot simply truncate the step, reject the current computation\n    // and let the loop compute another state with the truncated step.\n    // it is so small (much probably exactly 0 due to limited accuracy)\n    // that the code above would fail handling it.\n    // So we set up an artificial 0 size step by copying states\n    loop = false;\n} else {\n    // reject the step to match exactly the next switch time\n    hNew = dt;\n}"
					}
				},
				{
					"3771":{
						"locationInParent":"ASSIGNED",
						"value2":"double",
						"valueType":"double",
						"nodeType":"class spoon.support.reflect.code.CtVariableWriteImpl",
						"value":"hNew"
					}
				},
				{
					"3770":{
						"locationInParent":"VARIABLE",
						"value2":"double",
						"valueType":"double",
						"nodeType":"class spoon.support.reflect.reference.CtLocalVariableReferenceImpl",
						"value":"hNew"
					}
				},
				{
					"3769":{
						"locationInParent":"TYPE",
						"value2":"double",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"double"
					}
				},
				{
					"3773":{
						"locationInParent":"ASSIGNMENT",
						"value2":"java.lang.Integer",
						"valueType":"int",
						"nodeType":"class spoon.support.reflect.code.CtLiteralImpl",
						"value":"0"
					}
				},
				{
					"3772":{
						"locationInParent":"TYPE",
						"value2":"int",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"int"
					}
				},
				{
					"3774":{
						"locationInParent":"STATEMENT",
						"value2":"double = java.lang.Integer",
						"valueType":"double",
						"nodeType":"class spoon.support.reflect.code.CtAssignmentImpl",
						"value":"hNew = 0"
					}
				},
				{
					"3768":{
						"locationInParent":"TYPE",
						"value2":"double",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"double"
					}
				}
			],
			"edge_label":[
				[
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0
				],
				[
					1,
					0,
					1,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					1,
					0,
					1,
					1,
					0,
					0,
					1,
					0,
					1,
					0
				],
				[
					0,
					1,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					1,
					0,
					0,
					0,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					1,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0
				],
				[
					1,
					0,
					1,
					0,
					1,
					0,
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0
				]
			]
		},
		{
			"vertexes":[
				3775,
				973,
				961,
				982,
				3779,
				3778,
				3777,
				3776,
				3781,
				3780,
				3782
			],
			"edges":[
				[
					"",
					"Action",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"Action"
				],
				[
					"Action",
					"",
					"Control Dep",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"Control Dep",
					"",
					"AST",
					"Control Dep",
					"",
					"",
					"",
					"Control Dep",
					"",
					"Control Dep"
				],
				[
					"",
					"AST",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"Control Dep",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"AST"
				],
				[
					"",
					"",
					"",
					"",
					"AST",
					"",
					"AST",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"AST",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"AST"
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					""
				],
				[
					"Action",
					"",
					"Control Dep",
					"",
					"AST",
					"",
					"",
					"",
					"AST",
					"",
					""
				]
			],
			"vertex_label":[
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1
			],
			"attribute_label":[
				{
					"3775":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"973":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"961":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"982":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3779":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3778":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3777":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3776":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3781":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3780":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3782":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				}
			],
			"attributes":[
				{
					"3775":{
						"locationInParent":"ACTION",
						"value2":"",
						"valueType":"no type",
						"nodeType":"class model.actions.Insert",
						"value":"INSERT"
					}
				},
				{
					"973":{
						"locationInParent":"THEN",
						"value2":"{\n    // we cannot simply truncate the step, reject the current computation\n    // and let the loop compute another state with the truncated step.\n    // it is so small (much probably exactly 0 due to limited accuracy)\n    // that the code above would fail handling it.\n    // So we set up an artificial 0 size step by copying states\n    boolean = java.lang.Boolean;\n}",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtBlockImpl",
						"value":"{\n    // we cannot simply truncate the step, reject the current computation\n    // and let the loop compute another state with the truncated step.\n    // it is so small (much probably exactly 0 due to limited accuracy)\n    // that the code above would fail handling it.\n    // So we set up an artificial 0 size step by copying states\n    loop = false;\n}"
					}
				},
				{
					"961":{
						"locationInParent":"CONDITION",
						"value2":"java.lang.Math.abs(double) <= java.lang.Math.ulp(org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator)",
						"valueType":"null type",
						"nodeType":"class spoon.support.reflect.code.CtBinaryOperatorImpl",
						"value":"Math.abs(dt) <= Math.ulp(stepStart)"
					}
				},
				{
					"982":{
						"locationInParent":"STATEMENT",
						"value2":"if (java.lang.Math.abs(double) <= java.lang.Math.ulp(org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator)) {\n    // we cannot simply truncate the step, reject the current computation\n    // and let the loop compute another state with the truncated step.\n    // it is so small (much probably exactly 0 due to limited accuracy)\n    // that the code above would fail handling it.\n    // So we set up an artificial 0 size step by copying states\n    boolean = java.lang.Boolean;\n} else {\n    // reject the step to match exactly the next switch time\n    double = double;\n}",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtIfImpl",
						"value":"if (Math.abs(dt) <= Math.ulp(stepStart)) {\n    // we cannot simply truncate the step, reject the current computation\n    // and let the loop compute another state with the truncated step.\n    // it is so small (much probably exactly 0 due to limited accuracy)\n    // that the code above would fail handling it.\n    // So we set up an artificial 0 size step by copying states\n    loop = false;\n} else {\n    // reject the step to match exactly the next switch time\n    hNew = dt;\n}"
					}
				},
				{
					"3779":{
						"locationInParent":"ASSIGNED",
						"value2":"org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
						"valueType":"org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
						"nodeType":"class spoon.support.reflect.code.CtFieldWriteImpl",
						"value":"stepSize"
					}
				},
				{
					"3778":{
						"locationInParent":"VARIABLE",
						"value2":"org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
						"valueType":"org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
						"nodeType":"class spoon.support.reflect.reference.CtFieldReferenceImpl",
						"value":"stepSize"
					}
				},
				{
					"3777":{
						"locationInParent":"TYPE",
						"value2":"org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"EmbeddedRungeKuttaIntegrator"
					}
				},
				{
					"3776":{
						"locationInParent":"PACKAGE_REF",
						"value2":"org.apache.commons.math.ode.nonstiff",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtPackageReferenceImpl",
						"value":"org.apache.commons.math.ode.nonstiff"
					}
				},
				{
					"3781":{
						"locationInParent":"ASSIGNMENT",
						"value2":"java.lang.Integer",
						"valueType":"int",
						"nodeType":"class spoon.support.reflect.code.CtLiteralImpl",
						"value":"0"
					}
				},
				{
					"3780":{
						"locationInParent":"TYPE",
						"value2":"int",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"int"
					}
				},
				{
					"3782":{
						"locationInParent":"STATEMENT",
						"value2":"org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator = java.lang.Integer",
						"valueType":"null type",
						"nodeType":"class spoon.support.reflect.code.CtAssignmentImpl",
						"value":"stepSize = 0"
					}
				}
			],
			"edge_label":[
				[
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1
				],
				[
					1,
					0,
					1,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					1,
					0,
					1,
					1,
					0,
					0,
					0,
					1,
					0,
					1
				],
				[
					0,
					1,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					1
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0
				],
				[
					1,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					1,
					0,
					0
				]
			]
		},
		{
			"vertexes":[
				3783,
				973,
				961,
				982,
				3787,
				3786,
				3785,
				3789,
				3788,
				3790,
				3784
			],
			"edges":[
				[
					"",
					"Action",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"Action",
					""
				],
				[
					"Action",
					"",
					"Control Dep",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"Control Dep",
					"",
					"AST",
					"Control Dep",
					"",
					"",
					"Control Dep",
					"",
					"Control Dep",
					""
				],
				[
					"",
					"AST",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"Control Dep",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"AST",
					""
				],
				[
					"",
					"",
					"",
					"",
					"AST",
					"",
					"AST",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"AST",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					""
				],
				[
					"Action",
					"",
					"Control Dep",
					"",
					"AST",
					"",
					"",
					"AST",
					"",
					"",
					"AST"
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					""
				]
			],
			"vertex_label":[
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1
			],
			"attribute_label":[
				{
					"3783":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"973":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"961":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"982":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3787":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3786":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3785":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3789":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3788":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3790":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3784":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				}
			],
			"attributes":[
				{
					"3783":{
						"locationInParent":"ACTION",
						"value2":"",
						"valueType":"no type",
						"nodeType":"class model.actions.Insert",
						"value":"INSERT"
					}
				},
				{
					"973":{
						"locationInParent":"THEN",
						"value2":"{\n    // we cannot simply truncate the step, reject the current computation\n    // and let the loop compute another state with the truncated step.\n    // it is so small (much probably exactly 0 due to limited accuracy)\n    // that the code above would fail handling it.\n    // So we set up an artificial 0 size step by copying states\n    boolean = java.lang.Boolean;\n}",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtBlockImpl",
						"value":"{\n    // we cannot simply truncate the step, reject the current computation\n    // and let the loop compute another state with the truncated step.\n    // it is so small (much probably exactly 0 due to limited accuracy)\n    // that the code above would fail handling it.\n    // So we set up an artificial 0 size step by copying states\n    loop = false;\n}"
					}
				},
				{
					"961":{
						"locationInParent":"CONDITION",
						"value2":"java.lang.Math.abs(double) <= java.lang.Math.ulp(org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator)",
						"valueType":"null type",
						"nodeType":"class spoon.support.reflect.code.CtBinaryOperatorImpl",
						"value":"Math.abs(dt) <= Math.ulp(stepStart)"
					}
				},
				{
					"982":{
						"locationInParent":"STATEMENT",
						"value2":"if (java.lang.Math.abs(double) <= java.lang.Math.ulp(org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator)) {\n    // we cannot simply truncate the step, reject the current computation\n    // and let the loop compute another state with the truncated step.\n    // it is so small (much probably exactly 0 due to limited accuracy)\n    // that the code above would fail handling it.\n    // So we set up an artificial 0 size step by copying states\n    boolean = java.lang.Boolean;\n} else {\n    // reject the step to match exactly the next switch time\n    double = double;\n}",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtIfImpl",
						"value":"if (Math.abs(dt) <= Math.ulp(stepStart)) {\n    // we cannot simply truncate the step, reject the current computation\n    // and let the loop compute another state with the truncated step.\n    // it is so small (much probably exactly 0 due to limited accuracy)\n    // that the code above would fail handling it.\n    // So we set up an artificial 0 size step by copying states\n    loop = false;\n} else {\n    // reject the step to match exactly the next switch time\n    hNew = dt;\n}"
					}
				},
				{
					"3787":{
						"locationInParent":"ASSIGNED",
						"value2":"boolean",
						"valueType":"boolean",
						"nodeType":"class spoon.support.reflect.code.CtVariableWriteImpl",
						"value":"loop"
					}
				},
				{
					"3786":{
						"locationInParent":"VARIABLE",
						"value2":"boolean",
						"valueType":"boolean",
						"nodeType":"class spoon.support.reflect.reference.CtLocalVariableReferenceImpl",
						"value":"loop"
					}
				},
				{
					"3785":{
						"locationInParent":"TYPE",
						"value2":"boolean",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"boolean"
					}
				},
				{
					"3789":{
						"locationInParent":"ASSIGNMENT",
						"value2":"java.lang.Boolean",
						"valueType":"boolean",
						"nodeType":"class spoon.support.reflect.code.CtLiteralImpl",
						"value":"false"
					}
				},
				{
					"3788":{
						"locationInParent":"TYPE",
						"value2":"boolean",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"boolean"
					}
				},
				{
					"3790":{
						"locationInParent":"STATEMENT",
						"value2":"boolean = java.lang.Boolean",
						"valueType":"boolean",
						"nodeType":"class spoon.support.reflect.code.CtAssignmentImpl",
						"value":"loop = false"
					}
				},
				{
					"3784":{
						"locationInParent":"TYPE",
						"value2":"boolean",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"boolean"
					}
				}
			],
			"edge_label":[
				[
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0
				],
				[
					1,
					0,
					1,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					1,
					0,
					1,
					1,
					0,
					0,
					1,
					0,
					1,
					0
				],
				[
					0,
					1,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					1,
					0,
					0,
					0,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					1,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0
				],
				[
					1,
					0,
					1,
					0,
					1,
					0,
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0
				]
			]
		},
		{
			"vertexes":[
				3791,
				967,
				972,
				3728,
				3723,
				973
			],
			"edges":[
				[
					"",
					"Action",
					"",
					"",
					"Action",
					""
				],
				[
					"Action",
					"",
					"AST",
					"",
					"",
					""
				],
				[
					"",
					"AST",
					"",
					"",
					"",
					"AST"
				],
				[
					"",
					"",
					"",
					"",
					"AST",
					""
				],
				[
					"Action",
					"",
					"",
					"AST",
					"",
					""
				],
				[
					"",
					"",
					"AST",
					"",
					"",
					""
				]
			],
			"vertex_label":[
				1,
				1,
				1,
				1,
				1,
				1
			],
			"attribute_label":[
				{
					"3791":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"967":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"972":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3728":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3723":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"973":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				}
			],
			"attributes":[
				{
					"3791":{
						"locationInParent":"ACTION",
						"value2":"",
						"valueType":"no type",
						"nodeType":"class model.actions.Move",
						"value":"MOVE"
					}
				},
				{
					"967":{
						"locationInParent":"COMMENT",
						"value2":"// we cannot simply truncate the step, reject the current computation",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtCommentImpl",
						"value":"// we cannot simply truncate the step, reject the current computation"
					}
				},
				{
					"972":{
						"locationInParent":"STATEMENT",
						"value2":"// we cannot simply truncate the step, reject the current computation\n// and let the loop compute another state with the truncated step.\n// it is so small (much probably exactly 0 due to limited accuracy)\n// that the code above would fail handling it.\n// So we set up an artificial 0 size step by copying states\nboolean = java.lang.Boolean",
						"valueType":"boolean",
						"nodeType":"class spoon.support.reflect.code.CtAssignmentImpl",
						"value":"// we cannot simply truncate the step, reject the current computation\n// and let the loop compute another state with the truncated step.\n// it is so small (much probably exactly 0 due to limited accuracy)\n// that the code above would fail handling it.\n// So we set up an artificial 0 size step by copying states\nloop = false"
					}
				},
				{
					"3728":{
						"locationInParent":"STATEMENT",
						"value2":"// we cannot simply truncate the step, reject the current computation\n// and let the loop compute another state with the truncated step.\n// it is so small (much probably exactly 0 due to limited accuracy)\n// that the code above would fail handling it.\n// So we set up an artificial 0 size step by copying states\norg.apache.commons.math.ode.sampling.AbstractStepInterpolator.storeTime(org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator)",
						"valueType":"null type",
						"nodeType":"class spoon.support.reflect.code.CtInvocationImpl",
						"value":"// we cannot simply truncate the step, reject the current computation\n// and let the loop compute another state with the truncated step.\n// it is so small (much probably exactly 0 due to limited accuracy)\n// that the code above would fail handling it.\n// So we set up an artificial 0 size step by copying states\ninterpolator.storeTime(stepStart)"
					}
				},
				{
					"3723":{
						"locationInParent":"COMMENT",
						"value2":"// we cannot simply truncate the step, reject the current computation",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtCommentImpl",
						"value":"// we cannot simply truncate the step, reject the current computation"
					}
				},
				{
					"973":{
						"locationInParent":"THEN",
						"value2":"{\n    // we cannot simply truncate the step, reject the current computation\n    // and let the loop compute another state with the truncated step.\n    // it is so small (much probably exactly 0 due to limited accuracy)\n    // that the code above would fail handling it.\n    // So we set up an artificial 0 size step by copying states\n    boolean = java.lang.Boolean;\n}",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtBlockImpl",
						"value":"{\n    // we cannot simply truncate the step, reject the current computation\n    // and let the loop compute another state with the truncated step.\n    // it is so small (much probably exactly 0 due to limited accuracy)\n    // that the code above would fail handling it.\n    // So we set up an artificial 0 size step by copying states\n    loop = false;\n}"
					}
				}
			],
			"edge_label":[
				[
					0,
					1,
					0,
					0,
					1,
					0
				],
				[
					1,
					0,
					1,
					0,
					0,
					0
				],
				[
					0,
					1,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					0,
					0,
					1,
					0
				],
				[
					1,
					0,
					0,
					1,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					0
				]
			]
		},
		{
			"vertexes":[
				3792,
				968,
				972,
				3728,
				3724,
				973
			],
			"edges":[
				[
					"",
					"Action",
					"",
					"",
					"Action",
					""
				],
				[
					"Action",
					"",
					"AST",
					"",
					"",
					""
				],
				[
					"",
					"AST",
					"",
					"",
					"",
					"AST"
				],
				[
					"",
					"",
					"",
					"",
					"AST",
					""
				],
				[
					"Action",
					"",
					"",
					"AST",
					"",
					""
				],
				[
					"",
					"",
					"AST",
					"",
					"",
					""
				]
			],
			"vertex_label":[
				1,
				1,
				1,
				1,
				1,
				1
			],
			"attribute_label":[
				{
					"3792":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"968":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"972":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3728":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3724":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"973":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				}
			],
			"attributes":[
				{
					"3792":{
						"locationInParent":"ACTION",
						"value2":"",
						"valueType":"no type",
						"nodeType":"class model.actions.Move",
						"value":"MOVE"
					}
				},
				{
					"968":{
						"locationInParent":"COMMENT",
						"value2":"// and let the loop compute another state with the truncated step.",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtCommentImpl",
						"value":"// and let the loop compute another state with the truncated step."
					}
				},
				{
					"972":{
						"locationInParent":"STATEMENT",
						"value2":"// we cannot simply truncate the step, reject the current computation\n// and let the loop compute another state with the truncated step.\n// it is so small (much probably exactly 0 due to limited accuracy)\n// that the code above would fail handling it.\n// So we set up an artificial 0 size step by copying states\nboolean = java.lang.Boolean",
						"valueType":"boolean",
						"nodeType":"class spoon.support.reflect.code.CtAssignmentImpl",
						"value":"// we cannot simply truncate the step, reject the current computation\n// and let the loop compute another state with the truncated step.\n// it is so small (much probably exactly 0 due to limited accuracy)\n// that the code above would fail handling it.\n// So we set up an artificial 0 size step by copying states\nloop = false"
					}
				},
				{
					"3728":{
						"locationInParent":"STATEMENT",
						"value2":"// we cannot simply truncate the step, reject the current computation\n// and let the loop compute another state with the truncated step.\n// it is so small (much probably exactly 0 due to limited accuracy)\n// that the code above would fail handling it.\n// So we set up an artificial 0 size step by copying states\norg.apache.commons.math.ode.sampling.AbstractStepInterpolator.storeTime(org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator)",
						"valueType":"null type",
						"nodeType":"class spoon.support.reflect.code.CtInvocationImpl",
						"value":"// we cannot simply truncate the step, reject the current computation\n// and let the loop compute another state with the truncated step.\n// it is so small (much probably exactly 0 due to limited accuracy)\n// that the code above would fail handling it.\n// So we set up an artificial 0 size step by copying states\ninterpolator.storeTime(stepStart)"
					}
				},
				{
					"3724":{
						"locationInParent":"COMMENT",
						"value2":"// and let the loop compute another state with the truncated step.",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtCommentImpl",
						"value":"// and let the loop compute another state with the truncated step."
					}
				},
				{
					"973":{
						"locationInParent":"THEN",
						"value2":"{\n    // we cannot simply truncate the step, reject the current computation\n    // and let the loop compute another state with the truncated step.\n    // it is so small (much probably exactly 0 due to limited accuracy)\n    // that the code above would fail handling it.\n    // So we set up an artificial 0 size step by copying states\n    boolean = java.lang.Boolean;\n}",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtBlockImpl",
						"value":"{\n    // we cannot simply truncate the step, reject the current computation\n    // and let the loop compute another state with the truncated step.\n    // it is so small (much probably exactly 0 due to limited accuracy)\n    // that the code above would fail handling it.\n    // So we set up an artificial 0 size step by copying states\n    loop = false;\n}"
					}
				}
			],
			"edge_label":[
				[
					0,
					1,
					0,
					0,
					1,
					0
				],
				[
					1,
					0,
					1,
					0,
					0,
					0
				],
				[
					0,
					1,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					0,
					0,
					1,
					0
				],
				[
					1,
					0,
					0,
					1,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					0
				]
			]
		},
		{
			"vertexes":[
				3793,
				969,
				972,
				3728,
				3725,
				973
			],
			"edges":[
				[
					"",
					"Action",
					"",
					"",
					"Action",
					""
				],
				[
					"Action",
					"",
					"AST",
					"",
					"",
					""
				],
				[
					"",
					"AST",
					"",
					"",
					"",
					"AST"
				],
				[
					"",
					"",
					"",
					"",
					"AST",
					""
				],
				[
					"Action",
					"",
					"",
					"AST",
					"",
					""
				],
				[
					"",
					"",
					"AST",
					"",
					"",
					""
				]
			],
			"vertex_label":[
				1,
				1,
				1,
				1,
				1,
				1
			],
			"attribute_label":[
				{
					"3793":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"969":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"972":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3728":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3725":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"973":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				}
			],
			"attributes":[
				{
					"3793":{
						"locationInParent":"ACTION",
						"value2":"",
						"valueType":"no type",
						"nodeType":"class model.actions.Move",
						"value":"MOVE"
					}
				},
				{
					"969":{
						"locationInParent":"COMMENT",
						"value2":"// it is so small (much probably exactly 0 due to limited accuracy)",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtCommentImpl",
						"value":"// it is so small (much probably exactly 0 due to limited accuracy)"
					}
				},
				{
					"972":{
						"locationInParent":"STATEMENT",
						"value2":"// we cannot simply truncate the step, reject the current computation\n// and let the loop compute another state with the truncated step.\n// it is so small (much probably exactly 0 due to limited accuracy)\n// that the code above would fail handling it.\n// So we set up an artificial 0 size step by copying states\nboolean = java.lang.Boolean",
						"valueType":"boolean",
						"nodeType":"class spoon.support.reflect.code.CtAssignmentImpl",
						"value":"// we cannot simply truncate the step, reject the current computation\n// and let the loop compute another state with the truncated step.\n// it is so small (much probably exactly 0 due to limited accuracy)\n// that the code above would fail handling it.\n// So we set up an artificial 0 size step by copying states\nloop = false"
					}
				},
				{
					"3728":{
						"locationInParent":"STATEMENT",
						"value2":"// we cannot simply truncate the step, reject the current computation\n// and let the loop compute another state with the truncated step.\n// it is so small (much probably exactly 0 due to limited accuracy)\n// that the code above would fail handling it.\n// So we set up an artificial 0 size step by copying states\norg.apache.commons.math.ode.sampling.AbstractStepInterpolator.storeTime(org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator)",
						"valueType":"null type",
						"nodeType":"class spoon.support.reflect.code.CtInvocationImpl",
						"value":"// we cannot simply truncate the step, reject the current computation\n// and let the loop compute another state with the truncated step.\n// it is so small (much probably exactly 0 due to limited accuracy)\n// that the code above would fail handling it.\n// So we set up an artificial 0 size step by copying states\ninterpolator.storeTime(stepStart)"
					}
				},
				{
					"3725":{
						"locationInParent":"COMMENT",
						"value2":"// it is so small (much probably exactly 0 due to limited accuracy)",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtCommentImpl",
						"value":"// it is so small (much probably exactly 0 due to limited accuracy)"
					}
				},
				{
					"973":{
						"locationInParent":"THEN",
						"value2":"{\n    // we cannot simply truncate the step, reject the current computation\n    // and let the loop compute another state with the truncated step.\n    // it is so small (much probably exactly 0 due to limited accuracy)\n    // that the code above would fail handling it.\n    // So we set up an artificial 0 size step by copying states\n    boolean = java.lang.Boolean;\n}",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtBlockImpl",
						"value":"{\n    // we cannot simply truncate the step, reject the current computation\n    // and let the loop compute another state with the truncated step.\n    // it is so small (much probably exactly 0 due to limited accuracy)\n    // that the code above would fail handling it.\n    // So we set up an artificial 0 size step by copying states\n    loop = false;\n}"
					}
				}
			],
			"edge_label":[
				[
					0,
					1,
					0,
					0,
					1,
					0
				],
				[
					1,
					0,
					1,
					0,
					0,
					0
				],
				[
					0,
					1,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					0,
					0,
					1,
					0
				],
				[
					1,
					0,
					0,
					1,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					0
				]
			]
		},
		{
			"vertexes":[
				3794,
				970,
				972,
				3728,
				3726,
				973
			],
			"edges":[
				[
					"",
					"Action",
					"",
					"",
					"Action",
					""
				],
				[
					"Action",
					"",
					"AST",
					"",
					"",
					""
				],
				[
					"",
					"AST",
					"",
					"",
					"",
					"AST"
				],
				[
					"",
					"",
					"",
					"",
					"AST",
					""
				],
				[
					"Action",
					"",
					"",
					"AST",
					"",
					""
				],
				[
					"",
					"",
					"AST",
					"",
					"",
					""
				]
			],
			"vertex_label":[
				1,
				1,
				1,
				1,
				1,
				1
			],
			"attribute_label":[
				{
					"3794":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"970":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"972":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3728":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3726":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"973":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				}
			],
			"attributes":[
				{
					"3794":{
						"locationInParent":"ACTION",
						"value2":"",
						"valueType":"no type",
						"nodeType":"class model.actions.Move",
						"value":"MOVE"
					}
				},
				{
					"970":{
						"locationInParent":"COMMENT",
						"value2":"// that the code above would fail handling it.",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtCommentImpl",
						"value":"// that the code above would fail handling it."
					}
				},
				{
					"972":{
						"locationInParent":"STATEMENT",
						"value2":"// we cannot simply truncate the step, reject the current computation\n// and let the loop compute another state with the truncated step.\n// it is so small (much probably exactly 0 due to limited accuracy)\n// that the code above would fail handling it.\n// So we set up an artificial 0 size step by copying states\nboolean = java.lang.Boolean",
						"valueType":"boolean",
						"nodeType":"class spoon.support.reflect.code.CtAssignmentImpl",
						"value":"// we cannot simply truncate the step, reject the current computation\n// and let the loop compute another state with the truncated step.\n// it is so small (much probably exactly 0 due to limited accuracy)\n// that the code above would fail handling it.\n// So we set up an artificial 0 size step by copying states\nloop = false"
					}
				},
				{
					"3728":{
						"locationInParent":"STATEMENT",
						"value2":"// we cannot simply truncate the step, reject the current computation\n// and let the loop compute another state with the truncated step.\n// it is so small (much probably exactly 0 due to limited accuracy)\n// that the code above would fail handling it.\n// So we set up an artificial 0 size step by copying states\norg.apache.commons.math.ode.sampling.AbstractStepInterpolator.storeTime(org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator)",
						"valueType":"null type",
						"nodeType":"class spoon.support.reflect.code.CtInvocationImpl",
						"value":"// we cannot simply truncate the step, reject the current computation\n// and let the loop compute another state with the truncated step.\n// it is so small (much probably exactly 0 due to limited accuracy)\n// that the code above would fail handling it.\n// So we set up an artificial 0 size step by copying states\ninterpolator.storeTime(stepStart)"
					}
				},
				{
					"3726":{
						"locationInParent":"COMMENT",
						"value2":"// that the code above would fail handling it.",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtCommentImpl",
						"value":"// that the code above would fail handling it."
					}
				},
				{
					"973":{
						"locationInParent":"THEN",
						"value2":"{\n    // we cannot simply truncate the step, reject the current computation\n    // and let the loop compute another state with the truncated step.\n    // it is so small (much probably exactly 0 due to limited accuracy)\n    // that the code above would fail handling it.\n    // So we set up an artificial 0 size step by copying states\n    boolean = java.lang.Boolean;\n}",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtBlockImpl",
						"value":"{\n    // we cannot simply truncate the step, reject the current computation\n    // and let the loop compute another state with the truncated step.\n    // it is so small (much probably exactly 0 due to limited accuracy)\n    // that the code above would fail handling it.\n    // So we set up an artificial 0 size step by copying states\n    loop = false;\n}"
					}
				}
			],
			"edge_label":[
				[
					0,
					1,
					0,
					0,
					1,
					0
				],
				[
					1,
					0,
					1,
					0,
					0,
					0
				],
				[
					0,
					1,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					0,
					0,
					1,
					0
				],
				[
					1,
					0,
					0,
					1,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					0
				]
			]
		},
		{
			"vertexes":[
				3795,
				971,
				972,
				3728,
				3727,
				973
			],
			"edges":[
				[
					"",
					"Action",
					"",
					"",
					"Action",
					""
				],
				[
					"Action",
					"",
					"AST",
					"",
					"",
					""
				],
				[
					"",
					"AST",
					"",
					"",
					"",
					"AST"
				],
				[
					"",
					"",
					"",
					"",
					"AST",
					""
				],
				[
					"Action",
					"",
					"",
					"AST",
					"",
					""
				],
				[
					"",
					"",
					"AST",
					"",
					"",
					""
				]
			],
			"vertex_label":[
				1,
				1,
				1,
				1,
				1,
				1
			],
			"attribute_label":[
				{
					"3795":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"971":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"972":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3728":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3727":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"973":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				}
			],
			"attributes":[
				{
					"3795":{
						"locationInParent":"ACTION",
						"value2":"",
						"valueType":"no type",
						"nodeType":"class model.actions.Move",
						"value":"MOVE"
					}
				},
				{
					"971":{
						"locationInParent":"COMMENT",
						"value2":"// So we set up an artificial 0 size step by copying states",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtCommentImpl",
						"value":"// So we set up an artificial 0 size step by copying states"
					}
				},
				{
					"972":{
						"locationInParent":"STATEMENT",
						"value2":"// we cannot simply truncate the step, reject the current computation\n// and let the loop compute another state with the truncated step.\n// it is so small (much probably exactly 0 due to limited accuracy)\n// that the code above would fail handling it.\n// So we set up an artificial 0 size step by copying states\nboolean = java.lang.Boolean",
						"valueType":"boolean",
						"nodeType":"class spoon.support.reflect.code.CtAssignmentImpl",
						"value":"// we cannot simply truncate the step, reject the current computation\n// and let the loop compute another state with the truncated step.\n// it is so small (much probably exactly 0 due to limited accuracy)\n// that the code above would fail handling it.\n// So we set up an artificial 0 size step by copying states\nloop = false"
					}
				},
				{
					"3728":{
						"locationInParent":"STATEMENT",
						"value2":"// we cannot simply truncate the step, reject the current computation\n// and let the loop compute another state with the truncated step.\n// it is so small (much probably exactly 0 due to limited accuracy)\n// that the code above would fail handling it.\n// So we set up an artificial 0 size step by copying states\norg.apache.commons.math.ode.sampling.AbstractStepInterpolator.storeTime(org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator)",
						"valueType":"null type",
						"nodeType":"class spoon.support.reflect.code.CtInvocationImpl",
						"value":"// we cannot simply truncate the step, reject the current computation\n// and let the loop compute another state with the truncated step.\n// it is so small (much probably exactly 0 due to limited accuracy)\n// that the code above would fail handling it.\n// So we set up an artificial 0 size step by copying states\ninterpolator.storeTime(stepStart)"
					}
				},
				{
					"3727":{
						"locationInParent":"COMMENT",
						"value2":"// So we set up an artificial 0 size step by copying states",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtCommentImpl",
						"value":"// So we set up an artificial 0 size step by copying states"
					}
				},
				{
					"973":{
						"locationInParent":"THEN",
						"value2":"{\n    // we cannot simply truncate the step, reject the current computation\n    // and let the loop compute another state with the truncated step.\n    // it is so small (much probably exactly 0 due to limited accuracy)\n    // that the code above would fail handling it.\n    // So we set up an artificial 0 size step by copying states\n    boolean = java.lang.Boolean;\n}",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtBlockImpl",
						"value":"{\n    // we cannot simply truncate the step, reject the current computation\n    // and let the loop compute another state with the truncated step.\n    // it is so small (much probably exactly 0 due to limited accuracy)\n    // that the code above would fail handling it.\n    // So we set up an artificial 0 size step by copying states\n    loop = false;\n}"
					}
				}
			],
			"edge_label":[
				[
					0,
					1,
					0,
					0,
					1,
					0
				],
				[
					1,
					0,
					1,
					0,
					0,
					0
				],
				[
					0,
					1,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					0,
					0,
					1,
					0
				],
				[
					1,
					0,
					0,
					1,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					0
				]
			]
		}
	]
}