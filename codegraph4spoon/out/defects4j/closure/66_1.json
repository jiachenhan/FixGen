{
	"/Users/yumeng/JavaProjects/FixGen/data/d4j-info-2.0/buggy_fix/buggy/closure/closure_66_buggy/src/com/google/javascript/jscomp/TypeCheck.java":[
		{
			"vertexes":[
				6692,
				2,
				2607,
				1,
				3,
				6,
				9,
				12,
				2605,
				2606,
				6693,
				6694
			],
			"edges":[
				[
					"",
					"Action",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"Action",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"AST",
					"",
					"AST",
					"AST",
					"AST",
					"AST",
					"AST",
					"AST",
					"AST",
					"Action",
					""
				],
				[
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"Action",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"Action"
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"Action",
					""
				]
			],
			"vertex_label":[
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1
			],
			"attribute_label":[
				{
					"6692":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"2":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"2607":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"3":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"6":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"9":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"12":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"2605":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"2606":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"6693":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"6694":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				}
			],
			"attributes":[
				{
					"6692":{
						"locationInParent":"ACTION",
						"value2":"",
						"valueType":"no type",
						"nodeType":"class model.actions.Delete",
						"value":"DELETE"
					}
				},
				{
					"2":{
						"locationInParent":"TYPE",
						"value2":"void",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"void"
					}
				},
				{
					"2607":{
						"locationInParent":"TYPE_MEMBER",
						"value2":"exceed MAX_TOKEN_LENGTH:684 tokens",
						"valueType":"void",
						"nodeType":"class spoon.support.reflect.declaration.CtMethodImpl",
						"value":"exceed MAX_TOKEN_LENGTH:684 tokens"
					}
				},
				{
					"1":{
						"locationInParent":"MODIFIER",
						"value2":"public",
						"valueType":"no type",
						"nodeType":"class codegraph.CtVirtualElement",
						"value":"public"
					}
				},
				{
					"3":{
						"locationInParent":"METHOD_DEC_NAME",
						"value2":"visit",
						"valueType":"no type",
						"nodeType":"class codegraph.CtVirtualElement",
						"value":"visit"
					}
				},
				{
					"6":{
						"locationInParent":"PARAMETER",
						"value2":"com.google.javascript.jscomp.NodeTraversal t",
						"valueType":"com.google.javascript.jscomp.NodeTraversal",
						"nodeType":"class spoon.support.reflect.declaration.CtParameterImpl",
						"value":"NodeTraversal t"
					}
				},
				{
					"9":{
						"locationInParent":"PARAMETER",
						"value2":"com.google.javascript.rhino.Node n",
						"valueType":"com.google.javascript.rhino.Node",
						"nodeType":"class spoon.support.reflect.declaration.CtParameterImpl",
						"value":"Node n"
					}
				},
				{
					"12":{
						"locationInParent":"PARAMETER",
						"value2":"com.google.javascript.rhino.Node parent",
						"valueType":"com.google.javascript.rhino.Node",
						"nodeType":"class spoon.support.reflect.declaration.CtParameterImpl",
						"value":"Node parent"
					}
				},
				{
					"2605":{
						"locationInParent":"BODY",
						"value2":"exceed MAX_TOKEN_LENGTH:675 tokens",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtBlockImpl",
						"value":"exceed MAX_TOKEN_LENGTH:675 tokens"
					}
				},
				{
					"2606":{
						"locationInParent":"COMMENT",
						"value2":"/**\n * This is the meat of the type checking.  It is basically one big switch,\n * with each case representing one type of parse tree node.  The individual\n * cases are usually pretty straightforward.\n *\n * @param t\n * \t\tThe node traversal object that supplies context, such as the\n * \t\tscope chain to use in name lookups as well as error reporting.\n * @param n\n * \t\tThe node being visited.\n * @param parent\n * \t\tThe parent of the node n.\n */",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtJavaDocImpl",
						"value":"/**\n * This is the meat of the type checking.  It is basically one big switch,\n * with each case representing one type of parse tree node.  The individual\n * cases are usually pretty straightforward.\n *\n * @param t\n * \t\tThe node traversal object that supplies context, such as the\n * \t\tscope chain to use in name lookups as well as error reporting.\n * @param n\n * \t\tThe node being visited.\n * @param parent\n * \t\tThe parent of the node n.\n */"
					}
				},
				{
					"6693":{
						"locationInParent":"ACTION",
						"value2":"",
						"valueType":"no type",
						"nodeType":"class model.actions.Insert",
						"value":"INSERT"
					}
				},
				{
					"6694":{
						"locationInParent":"TYPE",
						"value2":"void",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"void"
					}
				}
			],
			"edge_label":[
				[
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					1,
					0,
					1,
					1,
					1,
					1,
					1,
					1,
					1,
					1,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0
				]
			]
		},
		{
			"vertexes":[
				6695,
				390,
				42,
				39,
				41,
				38,
				392,
				368,
				6699,
				6698,
				6697,
				6701,
				6700,
				6703,
				6696,
				6702,
				6704,
				388,
				387
			],
			"edges":[
				[
					"",
					"Action",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"Action",
					"",
					""
				],
				[
					"Action",
					"",
					"Control Dep",
					"",
					"",
					"",
					"AST",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					""
				],
				[
					"",
					"Control Dep",
					"",
					"AST",
					"AST",
					"AST",
					"Control Dep",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"AST",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"AST",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"Control Dep",
					"",
					"",
					"Control Dep",
					"",
					"Control Dep",
					"",
					"",
					"Control Dep",
					"Control Dep",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"Control Dep",
					"",
					"AST",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"",
					"AST",
					"AST",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"Control Dep",
					"AST",
					"",
					"",
					"AST",
					"",
					"",
					"AST",
					"AST",
					"AST",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					""
				],
				[
					"Action",
					"",
					"",
					"",
					"",
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST"
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					""
				]
			],
			"vertex_label":[
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1
			],
			"attribute_label":[
				{
					"6695":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"390":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"42":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"39":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"41":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"38":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"392":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"368":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"6699":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"6698":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"6697":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"6701":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"6700":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"6703":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"6696":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"6702":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"6704":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"388":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"387":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				}
			],
			"attributes":[
				{
					"6695":{
						"locationInParent":"ACTION",
						"value2":"",
						"valueType":"no type",
						"nodeType":"class model.actions.Insert",
						"value":"INSERT"
					}
				},
				{
					"390":{
						"locationInParent":"STATEMENT",
						"value2":"// Object literal keys are handled with OBJECTLIT\nif (!com.google.javascript.jscomp.NodeUtil.isObjectLitKey(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node.getParent())) {\n    ensureTyped(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.jscomp.STRING_TYPE);\n    // Object literal keys are not typeable\n}",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtIfImpl",
						"value":"// Object literal keys are handled with OBJECTLIT\nif (!NodeUtil.isObjectLitKey(n, n.getParent())) {\n    ensureTyped(t, n, STRING_TYPE);\n    // Object literal keys are not typeable\n}"
					}
				},
				{
					"42":{
						"locationInParent":"EXPRESSION",
						"value2":"com.google.javascript.rhino.Node.getType()",
						"valueType":"null type",
						"nodeType":"class spoon.support.reflect.code.CtInvocationImpl",
						"value":"n.getType()"
					}
				},
				{
					"39":{
						"locationInParent":"METHOD_NAME",
						"value2":"getType",
						"valueType":"no type",
						"nodeType":"class codegraph.CtVirtualElement",
						"value":"getType"
					}
				},
				{
					"41":{
						"locationInParent":"TARGET",
						"value2":"com.google.javascript.rhino.Node",
						"valueType":"com.google.javascript.rhino.Node",
						"nodeType":"class spoon.support.reflect.code.CtVariableReadImpl",
						"value":"n"
					}
				},
				{
					"38":{
						"locationInParent":"EXECUTABLE_REF",
						"value2":"getType",
						"valueType":"null type",
						"nodeType":"class spoon.support.reflect.reference.CtExecutableReferenceImpl",
						"value":"getType"
					}
				},
				{
					"392":{
						"locationInParent":"CASE",
						"value2":"case com.google.javascript.rhino.Token.com.google.javascript.jscomp.TypeCheck :\n    // Object literal keys are handled with OBJECTLIT\n    if (!com.google.javascript.jscomp.NodeUtil.isObjectLitKey(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node.getParent())) {\n        ensureTyped(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.jscomp.STRING_TYPE);\n        // Object literal keys are not typeable\n    }\n    break;",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtCaseImpl",
						"value":"case Token.STRING :\n    // Object literal keys are handled with OBJECTLIT\n    if (!NodeUtil.isObjectLitKey(n, n.getParent())) {\n        ensureTyped(t, n, STRING_TYPE);\n        // Object literal keys are not typeable\n    }\n    break;"
					}
				},
				{
					"368":{
						"locationInParent":"CONDITION",
						"value2":"!com.google.javascript.jscomp.NodeUtil.isObjectLitKey(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node.getParent())",
						"valueType":"null type",
						"nodeType":"class spoon.support.reflect.code.CtUnaryOperatorImpl",
						"value":"!NodeUtil.isObjectLitKey(n, n.getParent())"
					}
				},
				{
					"6699":{
						"locationInParent":"ASSIGNED",
						"value2":"boolean",
						"valueType":"boolean",
						"nodeType":"class spoon.support.reflect.code.CtVariableWriteImpl",
						"value":"typeable"
					}
				},
				{
					"6698":{
						"locationInParent":"VARIABLE",
						"value2":"boolean",
						"valueType":"boolean",
						"nodeType":"class spoon.support.reflect.reference.CtLocalVariableReferenceImpl",
						"value":"typeable"
					}
				},
				{
					"6697":{
						"locationInParent":"TYPE",
						"value2":"boolean",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"boolean"
					}
				},
				{
					"6701":{
						"locationInParent":"ASSIGNMENT",
						"value2":"java.lang.Boolean",
						"valueType":"boolean",
						"nodeType":"class spoon.support.reflect.code.CtLiteralImpl",
						"value":"false"
					}
				},
				{
					"6700":{
						"locationInParent":"TYPE",
						"value2":"boolean",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"boolean"
					}
				},
				{
					"6703":{
						"locationInParent":"STATEMENT",
						"value2":"// Object literal keys are not typeable\nboolean = java.lang.Boolean",
						"valueType":"boolean",
						"nodeType":"class spoon.support.reflect.code.CtAssignmentImpl",
						"value":"// Object literal keys are not typeable\ntypeable = false"
					}
				},
				{
					"6696":{
						"locationInParent":"TYPE",
						"value2":"boolean",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"boolean"
					}
				},
				{
					"6702":{
						"locationInParent":"COMMENT",
						"value2":"// Object literal keys are not typeable",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtCommentImpl",
						"value":"// Object literal keys are not typeable"
					}
				},
				{
					"6704":{
						"locationInParent":"ELSE",
						"value2":"{\n    // Object literal keys are not typeable\n    boolean = java.lang.Boolean;\n}",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtBlockImpl",
						"value":"{\n    // Object literal keys are not typeable\n    typeable = false;\n}"
					}
				},
				{
					"388":{
						"locationInParent":"THEN",
						"value2":"{\n    ensureTyped(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.jscomp.STRING_TYPE);\n    // Object literal keys are not typeable\n}",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtBlockImpl",
						"value":"{\n    ensureTyped(t, n, STRING_TYPE);\n    // Object literal keys are not typeable\n}"
					}
				},
				{
					"387":{
						"locationInParent":"STATEMENT",
						"value2":"// Object literal keys are not typeable",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtCommentImpl",
						"value":"// Object literal keys are not typeable"
					}
				}
			],
			"edge_label":[
				[
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0
				],
				[
					1,
					0,
					1,
					0,
					0,
					0,
					1,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0
				],
				[
					0,
					1,
					0,
					1,
					1,
					1,
					1,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					1,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					1,
					1,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					1,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					1,
					1,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					1,
					0,
					0,
					1,
					0,
					0,
					1,
					1,
					1,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0
				],
				[
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0
				]
			]
		},
		{
			"vertexes":[
				6705,
				387,
				388,
				368,
				6703,
				6702,
				6704,
				390
			],
			"edges":[
				[
					"",
					"Action",
					"",
					"",
					"",
					"Action",
					"",
					""
				],
				[
					"Action",
					"",
					"AST",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"AST",
					"",
					"Control Dep",
					"",
					"",
					"",
					"AST"
				],
				[
					"",
					"",
					"Control Dep",
					"",
					"Control Dep",
					"",
					"Control Dep",
					"AST"
				],
				[
					"",
					"",
					"",
					"Control Dep",
					"",
					"AST",
					"AST",
					""
				],
				[
					"Action",
					"",
					"",
					"",
					"AST",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"Control Dep",
					"AST",
					"",
					"",
					""
				],
				[
					"",
					"",
					"AST",
					"AST",
					"",
					"",
					"",
					""
				]
			],
			"vertex_label":[
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1
			],
			"attribute_label":[
				{
					"6705":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"387":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"388":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"368":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"6703":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"6702":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"6704":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"390":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				}
			],
			"attributes":[
				{
					"6705":{
						"locationInParent":"ACTION",
						"value2":"",
						"valueType":"no type",
						"nodeType":"class model.actions.Move",
						"value":"MOVE"
					}
				},
				{
					"387":{
						"locationInParent":"STATEMENT",
						"value2":"// Object literal keys are not typeable",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtCommentImpl",
						"value":"// Object literal keys are not typeable"
					}
				},
				{
					"388":{
						"locationInParent":"THEN",
						"value2":"{\n    ensureTyped(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.jscomp.STRING_TYPE);\n    // Object literal keys are not typeable\n}",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtBlockImpl",
						"value":"{\n    ensureTyped(t, n, STRING_TYPE);\n    // Object literal keys are not typeable\n}"
					}
				},
				{
					"368":{
						"locationInParent":"CONDITION",
						"value2":"!com.google.javascript.jscomp.NodeUtil.isObjectLitKey(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node.getParent())",
						"valueType":"null type",
						"nodeType":"class spoon.support.reflect.code.CtUnaryOperatorImpl",
						"value":"!NodeUtil.isObjectLitKey(n, n.getParent())"
					}
				},
				{
					"6703":{
						"locationInParent":"STATEMENT",
						"value2":"// Object literal keys are not typeable\nboolean = java.lang.Boolean",
						"valueType":"boolean",
						"nodeType":"class spoon.support.reflect.code.CtAssignmentImpl",
						"value":"// Object literal keys are not typeable\ntypeable = false"
					}
				},
				{
					"6702":{
						"locationInParent":"COMMENT",
						"value2":"// Object literal keys are not typeable",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtCommentImpl",
						"value":"// Object literal keys are not typeable"
					}
				},
				{
					"6704":{
						"locationInParent":"ELSE",
						"value2":"{\n    // Object literal keys are not typeable\n    boolean = java.lang.Boolean;\n}",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtBlockImpl",
						"value":"{\n    // Object literal keys are not typeable\n    typeable = false;\n}"
					}
				},
				{
					"390":{
						"locationInParent":"STATEMENT",
						"value2":"// Object literal keys are handled with OBJECTLIT\nif (!com.google.javascript.jscomp.NodeUtil.isObjectLitKey(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node.getParent())) {\n    ensureTyped(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.jscomp.STRING_TYPE);\n    // Object literal keys are not typeable\n}",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtIfImpl",
						"value":"// Object literal keys are handled with OBJECTLIT\nif (!NodeUtil.isObjectLitKey(n, n.getParent())) {\n    ensureTyped(t, n, STRING_TYPE);\n    // Object literal keys are not typeable\n}"
					}
				}
			],
			"edge_label":[
				[
					0,
					1,
					0,
					0,
					0,
					1,
					0,
					0
				],
				[
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					1,
					0,
					1,
					0,
					1,
					1
				],
				[
					0,
					0,
					0,
					1,
					0,
					1,
					1,
					0
				],
				[
					1,
					0,
					0,
					0,
					1,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					1,
					1,
					0,
					0,
					0
				],
				[
					0,
					0,
					1,
					1,
					0,
					0,
					0,
					0
				]
			]
		}
	]
}