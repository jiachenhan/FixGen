{
	"/Users/yumeng/JavaProjects/FixGen/data/d4j-info-2.0/buggy_fix/buggy/closure/closure_54_buggy/src/com/google/javascript/jscomp/TypedScopeCreator.java":[
		{
			"vertexes":[
				1851,
				205,
				210,
				1925,
				238
			],
			"edges":[
				[
					"",
					"Action",
					"",
					"",
					""
				],
				[
					"Action",
					"",
					"AST",
					"",
					""
				],
				[
					"",
					"AST",
					"",
					"Control Dep",
					"AST"
				],
				[
					"",
					"",
					"Control Dep",
					"",
					""
				],
				[
					"",
					"",
					"AST",
					"",
					""
				]
			],
			"vertex_label":[
				1,
				1,
				1,
				1,
				1
			],
			"attribute_label":[
				{
					"1851":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"205":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"210":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1925":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"238":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				}
			],
			"attributes":[
				{
					"1851":{
						"locationInParent":"ACTION",
						"value2":"",
						"valueType":"no type",
						"nodeType":"class model.actions.Delete",
						"value":"DELETE"
					}
				},
				{
					"205":{
						"locationInParent":"COMMENT",
						"value2":"// If the programmer has declared that F inherits from Super,",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtCommentImpl",
						"value":"// If the programmer has declared that F inherits from Super,"
					}
				},
				{
					"210":{
						"locationInParent":"STATEMENT",
						"value2":"// If the programmer has declared that F inherits from Super,\n// and they assign F.prototype to an object literal,\n// then they are responsible for making sure that the object literal's\n// implicit prototype is set up appropriately. We just obey\n// the @extends tag.\nif (!com.google.javascript.jscomp.Scope.Var.isTypeInferred()) {\n    // If the programmer has declared that F inherits from Super,\n    // and they assign F.prototype to some arbitrary expression,\n    // there's not much we can do. We just ignore the expression,\n    // and hope they've annotated their code in a way to tell us\n    // what props are going to be on that prototype.\n    return;\n}",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtIfImpl",
						"value":"// If the programmer has declared that F inherits from Super,\n// and they assign F.prototype to an object literal,\n// then they are responsible for making sure that the object literal's\n// implicit prototype is set up appropriately. We just obey\n// the @extends tag.\nif (!qVar.isTypeInferred()) {\n    // If the programmer has declared that F inherits from Super,\n    // and they assign F.prototype to some arbitrary expression,\n    // there's not much we can do. We just ignore the expression,\n    // and hope they've annotated their code in a way to tell us\n    // what props are going to be on that prototype.\n    return;\n}"
					}
				},
				{
					"1925":{
						"locationInParent":"CONDITION",
						"value2":"((com.google.javascript.rhino.jstype.ObjectType != null) && (com.google.javascript.rhino.Node != null)) && (com.google.javascript.rhino.Node.getType() == com.google.javascript.rhino.Token.com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder)",
						"valueType":"null type",
						"nodeType":"class spoon.support.reflect.code.CtBinaryOperatorImpl",
						"value":"((qVarType != null) && (rhsValue != null)) && (rhsValue.getType() == Token.OBJECTLIT)"
					}
				},
				{
					"238":{
						"locationInParent":"THEN",
						"value2":"{\n    // If the programmer has declared that F inherits from Super,\n    // and they assign F.prototype to an object literal,\n    // then they are responsible for making sure that the object literal's\n    // implicit prototype is set up appropriately. We just obey\n    // the @extends tag.\n    if (!com.google.javascript.jscomp.Scope.Var.isTypeInferred()) {\n        // If the programmer has declared that F inherits from Super,\n        // and they assign F.prototype to some arbitrary expression,\n        // there's not much we can do. We just ignore the expression,\n        // and hope they've annotated their code in a way to tell us\n        // what props are going to be on that prototype.\n        return;\n    }\n    if (com.google.javascript.jscomp.Scope.Var.getScope() == com.google.javascript.jscomp.Scope) {\n        com.google.javascript.jscomp.Scope.undeclare(com.google.javascript.jscomp.Scope.Var);\n    }\n}",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtBlockImpl",
						"value":"{\n    // If the programmer has declared that F inherits from Super,\n    // and they assign F.prototype to an object literal,\n    // then they are responsible for making sure that the object literal's\n    // implicit prototype is set up appropriately. We just obey\n    // the @extends tag.\n    if (!qVar.isTypeInferred()) {\n        // If the programmer has declared that F inherits from Super,\n        // and they assign F.prototype to some arbitrary expression,\n        // there's not much we can do. We just ignore the expression,\n        // and hope they've annotated their code in a way to tell us\n        // what props are going to be on that prototype.\n        return;\n    }\n    if (qVar.getScope() == scope) {\n        scope.undeclare(qVar);\n    }\n}"
					}
				}
			],
			"edge_label":[
				[
					0,
					1,
					0,
					0,
					0
				],
				[
					1,
					0,
					1,
					0,
					0
				],
				[
					0,
					1,
					0,
					1,
					1
				],
				[
					0,
					0,
					1,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0
				]
			]
		},
		{
			"vertexes":[
				1852,
				206,
				210,
				1925,
				238
			],
			"edges":[
				[
					"",
					"Action",
					"",
					"",
					""
				],
				[
					"Action",
					"",
					"AST",
					"",
					""
				],
				[
					"",
					"AST",
					"",
					"Control Dep",
					"AST"
				],
				[
					"",
					"",
					"Control Dep",
					"",
					""
				],
				[
					"",
					"",
					"AST",
					"",
					""
				]
			],
			"vertex_label":[
				1,
				1,
				1,
				1,
				1
			],
			"attribute_label":[
				{
					"1852":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"206":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"210":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1925":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"238":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				}
			],
			"attributes":[
				{
					"1852":{
						"locationInParent":"ACTION",
						"value2":"",
						"valueType":"no type",
						"nodeType":"class model.actions.Delete",
						"value":"DELETE"
					}
				},
				{
					"206":{
						"locationInParent":"COMMENT",
						"value2":"// and they assign F.prototype to an object literal,",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtCommentImpl",
						"value":"// and they assign F.prototype to an object literal,"
					}
				},
				{
					"210":{
						"locationInParent":"STATEMENT",
						"value2":"// If the programmer has declared that F inherits from Super,\n// and they assign F.prototype to an object literal,\n// then they are responsible for making sure that the object literal's\n// implicit prototype is set up appropriately. We just obey\n// the @extends tag.\nif (!com.google.javascript.jscomp.Scope.Var.isTypeInferred()) {\n    // If the programmer has declared that F inherits from Super,\n    // and they assign F.prototype to some arbitrary expression,\n    // there's not much we can do. We just ignore the expression,\n    // and hope they've annotated their code in a way to tell us\n    // what props are going to be on that prototype.\n    return;\n}",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtIfImpl",
						"value":"// If the programmer has declared that F inherits from Super,\n// and they assign F.prototype to an object literal,\n// then they are responsible for making sure that the object literal's\n// implicit prototype is set up appropriately. We just obey\n// the @extends tag.\nif (!qVar.isTypeInferred()) {\n    // If the programmer has declared that F inherits from Super,\n    // and they assign F.prototype to some arbitrary expression,\n    // there's not much we can do. We just ignore the expression,\n    // and hope they've annotated their code in a way to tell us\n    // what props are going to be on that prototype.\n    return;\n}"
					}
				},
				{
					"1925":{
						"locationInParent":"CONDITION",
						"value2":"((com.google.javascript.rhino.jstype.ObjectType != null) && (com.google.javascript.rhino.Node != null)) && (com.google.javascript.rhino.Node.getType() == com.google.javascript.rhino.Token.com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder)",
						"valueType":"null type",
						"nodeType":"class spoon.support.reflect.code.CtBinaryOperatorImpl",
						"value":"((qVarType != null) && (rhsValue != null)) && (rhsValue.getType() == Token.OBJECTLIT)"
					}
				},
				{
					"238":{
						"locationInParent":"THEN",
						"value2":"{\n    // If the programmer has declared that F inherits from Super,\n    // and they assign F.prototype to an object literal,\n    // then they are responsible for making sure that the object literal's\n    // implicit prototype is set up appropriately. We just obey\n    // the @extends tag.\n    if (!com.google.javascript.jscomp.Scope.Var.isTypeInferred()) {\n        // If the programmer has declared that F inherits from Super,\n        // and they assign F.prototype to some arbitrary expression,\n        // there's not much we can do. We just ignore the expression,\n        // and hope they've annotated their code in a way to tell us\n        // what props are going to be on that prototype.\n        return;\n    }\n    if (com.google.javascript.jscomp.Scope.Var.getScope() == com.google.javascript.jscomp.Scope) {\n        com.google.javascript.jscomp.Scope.undeclare(com.google.javascript.jscomp.Scope.Var);\n    }\n}",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtBlockImpl",
						"value":"{\n    // If the programmer has declared that F inherits from Super,\n    // and they assign F.prototype to an object literal,\n    // then they are responsible for making sure that the object literal's\n    // implicit prototype is set up appropriately. We just obey\n    // the @extends tag.\n    if (!qVar.isTypeInferred()) {\n        // If the programmer has declared that F inherits from Super,\n        // and they assign F.prototype to some arbitrary expression,\n        // there's not much we can do. We just ignore the expression,\n        // and hope they've annotated their code in a way to tell us\n        // what props are going to be on that prototype.\n        return;\n    }\n    if (qVar.getScope() == scope) {\n        scope.undeclare(qVar);\n    }\n}"
					}
				}
			],
			"edge_label":[
				[
					0,
					1,
					0,
					0,
					0
				],
				[
					1,
					0,
					1,
					0,
					0
				],
				[
					0,
					1,
					0,
					1,
					1
				],
				[
					0,
					0,
					1,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0
				]
			]
		},
		{
			"vertexes":[
				1853,
				207,
				210,
				1925,
				238
			],
			"edges":[
				[
					"",
					"Action",
					"",
					"",
					""
				],
				[
					"Action",
					"",
					"AST",
					"",
					""
				],
				[
					"",
					"AST",
					"",
					"Control Dep",
					"AST"
				],
				[
					"",
					"",
					"Control Dep",
					"",
					""
				],
				[
					"",
					"",
					"AST",
					"",
					""
				]
			],
			"vertex_label":[
				1,
				1,
				1,
				1,
				1
			],
			"attribute_label":[
				{
					"1853":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"207":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"210":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1925":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"238":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				}
			],
			"attributes":[
				{
					"1853":{
						"locationInParent":"ACTION",
						"value2":"",
						"valueType":"no type",
						"nodeType":"class model.actions.Delete",
						"value":"DELETE"
					}
				},
				{
					"207":{
						"locationInParent":"COMMENT",
						"value2":"// then they are responsible for making sure that the object literal's",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtCommentImpl",
						"value":"// then they are responsible for making sure that the object literal's"
					}
				},
				{
					"210":{
						"locationInParent":"STATEMENT",
						"value2":"// If the programmer has declared that F inherits from Super,\n// and they assign F.prototype to an object literal,\n// then they are responsible for making sure that the object literal's\n// implicit prototype is set up appropriately. We just obey\n// the @extends tag.\nif (!com.google.javascript.jscomp.Scope.Var.isTypeInferred()) {\n    // If the programmer has declared that F inherits from Super,\n    // and they assign F.prototype to some arbitrary expression,\n    // there's not much we can do. We just ignore the expression,\n    // and hope they've annotated their code in a way to tell us\n    // what props are going to be on that prototype.\n    return;\n}",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtIfImpl",
						"value":"// If the programmer has declared that F inherits from Super,\n// and they assign F.prototype to an object literal,\n// then they are responsible for making sure that the object literal's\n// implicit prototype is set up appropriately. We just obey\n// the @extends tag.\nif (!qVar.isTypeInferred()) {\n    // If the programmer has declared that F inherits from Super,\n    // and they assign F.prototype to some arbitrary expression,\n    // there's not much we can do. We just ignore the expression,\n    // and hope they've annotated their code in a way to tell us\n    // what props are going to be on that prototype.\n    return;\n}"
					}
				},
				{
					"1925":{
						"locationInParent":"CONDITION",
						"value2":"((com.google.javascript.rhino.jstype.ObjectType != null) && (com.google.javascript.rhino.Node != null)) && (com.google.javascript.rhino.Node.getType() == com.google.javascript.rhino.Token.com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder)",
						"valueType":"null type",
						"nodeType":"class spoon.support.reflect.code.CtBinaryOperatorImpl",
						"value":"((qVarType != null) && (rhsValue != null)) && (rhsValue.getType() == Token.OBJECTLIT)"
					}
				},
				{
					"238":{
						"locationInParent":"THEN",
						"value2":"{\n    // If the programmer has declared that F inherits from Super,\n    // and they assign F.prototype to an object literal,\n    // then they are responsible for making sure that the object literal's\n    // implicit prototype is set up appropriately. We just obey\n    // the @extends tag.\n    if (!com.google.javascript.jscomp.Scope.Var.isTypeInferred()) {\n        // If the programmer has declared that F inherits from Super,\n        // and they assign F.prototype to some arbitrary expression,\n        // there's not much we can do. We just ignore the expression,\n        // and hope they've annotated their code in a way to tell us\n        // what props are going to be on that prototype.\n        return;\n    }\n    if (com.google.javascript.jscomp.Scope.Var.getScope() == com.google.javascript.jscomp.Scope) {\n        com.google.javascript.jscomp.Scope.undeclare(com.google.javascript.jscomp.Scope.Var);\n    }\n}",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtBlockImpl",
						"value":"{\n    // If the programmer has declared that F inherits from Super,\n    // and they assign F.prototype to an object literal,\n    // then they are responsible for making sure that the object literal's\n    // implicit prototype is set up appropriately. We just obey\n    // the @extends tag.\n    if (!qVar.isTypeInferred()) {\n        // If the programmer has declared that F inherits from Super,\n        // and they assign F.prototype to some arbitrary expression,\n        // there's not much we can do. We just ignore the expression,\n        // and hope they've annotated their code in a way to tell us\n        // what props are going to be on that prototype.\n        return;\n    }\n    if (qVar.getScope() == scope) {\n        scope.undeclare(qVar);\n    }\n}"
					}
				}
			],
			"edge_label":[
				[
					0,
					1,
					0,
					0,
					0
				],
				[
					1,
					0,
					1,
					0,
					0
				],
				[
					0,
					1,
					0,
					1,
					1
				],
				[
					0,
					0,
					1,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0
				]
			]
		},
		{
			"vertexes":[
				1854,
				208,
				210,
				1925,
				238
			],
			"edges":[
				[
					"",
					"Action",
					"",
					"",
					""
				],
				[
					"Action",
					"",
					"AST",
					"",
					""
				],
				[
					"",
					"AST",
					"",
					"Control Dep",
					"AST"
				],
				[
					"",
					"",
					"Control Dep",
					"",
					""
				],
				[
					"",
					"",
					"AST",
					"",
					""
				]
			],
			"vertex_label":[
				1,
				1,
				1,
				1,
				1
			],
			"attribute_label":[
				{
					"1854":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"208":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"210":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1925":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"238":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				}
			],
			"attributes":[
				{
					"1854":{
						"locationInParent":"ACTION",
						"value2":"",
						"valueType":"no type",
						"nodeType":"class model.actions.Delete",
						"value":"DELETE"
					}
				},
				{
					"208":{
						"locationInParent":"COMMENT",
						"value2":"// implicit prototype is set up appropriately. We just obey",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtCommentImpl",
						"value":"// implicit prototype is set up appropriately. We just obey"
					}
				},
				{
					"210":{
						"locationInParent":"STATEMENT",
						"value2":"// If the programmer has declared that F inherits from Super,\n// and they assign F.prototype to an object literal,\n// then they are responsible for making sure that the object literal's\n// implicit prototype is set up appropriately. We just obey\n// the @extends tag.\nif (!com.google.javascript.jscomp.Scope.Var.isTypeInferred()) {\n    // If the programmer has declared that F inherits from Super,\n    // and they assign F.prototype to some arbitrary expression,\n    // there's not much we can do. We just ignore the expression,\n    // and hope they've annotated their code in a way to tell us\n    // what props are going to be on that prototype.\n    return;\n}",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtIfImpl",
						"value":"// If the programmer has declared that F inherits from Super,\n// and they assign F.prototype to an object literal,\n// then they are responsible for making sure that the object literal's\n// implicit prototype is set up appropriately. We just obey\n// the @extends tag.\nif (!qVar.isTypeInferred()) {\n    // If the programmer has declared that F inherits from Super,\n    // and they assign F.prototype to some arbitrary expression,\n    // there's not much we can do. We just ignore the expression,\n    // and hope they've annotated their code in a way to tell us\n    // what props are going to be on that prototype.\n    return;\n}"
					}
				},
				{
					"1925":{
						"locationInParent":"CONDITION",
						"value2":"((com.google.javascript.rhino.jstype.ObjectType != null) && (com.google.javascript.rhino.Node != null)) && (com.google.javascript.rhino.Node.getType() == com.google.javascript.rhino.Token.com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder)",
						"valueType":"null type",
						"nodeType":"class spoon.support.reflect.code.CtBinaryOperatorImpl",
						"value":"((qVarType != null) && (rhsValue != null)) && (rhsValue.getType() == Token.OBJECTLIT)"
					}
				},
				{
					"238":{
						"locationInParent":"THEN",
						"value2":"{\n    // If the programmer has declared that F inherits from Super,\n    // and they assign F.prototype to an object literal,\n    // then they are responsible for making sure that the object literal's\n    // implicit prototype is set up appropriately. We just obey\n    // the @extends tag.\n    if (!com.google.javascript.jscomp.Scope.Var.isTypeInferred()) {\n        // If the programmer has declared that F inherits from Super,\n        // and they assign F.prototype to some arbitrary expression,\n        // there's not much we can do. We just ignore the expression,\n        // and hope they've annotated their code in a way to tell us\n        // what props are going to be on that prototype.\n        return;\n    }\n    if (com.google.javascript.jscomp.Scope.Var.getScope() == com.google.javascript.jscomp.Scope) {\n        com.google.javascript.jscomp.Scope.undeclare(com.google.javascript.jscomp.Scope.Var);\n    }\n}",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtBlockImpl",
						"value":"{\n    // If the programmer has declared that F inherits from Super,\n    // and they assign F.prototype to an object literal,\n    // then they are responsible for making sure that the object literal's\n    // implicit prototype is set up appropriately. We just obey\n    // the @extends tag.\n    if (!qVar.isTypeInferred()) {\n        // If the programmer has declared that F inherits from Super,\n        // and they assign F.prototype to some arbitrary expression,\n        // there's not much we can do. We just ignore the expression,\n        // and hope they've annotated their code in a way to tell us\n        // what props are going to be on that prototype.\n        return;\n    }\n    if (qVar.getScope() == scope) {\n        scope.undeclare(qVar);\n    }\n}"
					}
				}
			],
			"edge_label":[
				[
					0,
					1,
					0,
					0,
					0
				],
				[
					1,
					0,
					1,
					0,
					0
				],
				[
					0,
					1,
					0,
					1,
					1
				],
				[
					0,
					0,
					1,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0
				]
			]
		},
		{
			"vertexes":[
				1855,
				209,
				210,
				1925,
				238
			],
			"edges":[
				[
					"",
					"Action",
					"",
					"",
					""
				],
				[
					"Action",
					"",
					"AST",
					"",
					""
				],
				[
					"",
					"AST",
					"",
					"Control Dep",
					"AST"
				],
				[
					"",
					"",
					"Control Dep",
					"",
					""
				],
				[
					"",
					"",
					"AST",
					"",
					""
				]
			],
			"vertex_label":[
				1,
				1,
				1,
				1,
				1
			],
			"attribute_label":[
				{
					"1855":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"209":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"210":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1925":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"238":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				}
			],
			"attributes":[
				{
					"1855":{
						"locationInParent":"ACTION",
						"value2":"",
						"valueType":"no type",
						"nodeType":"class model.actions.Delete",
						"value":"DELETE"
					}
				},
				{
					"209":{
						"locationInParent":"COMMENT",
						"value2":"// the @extends tag.",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtCommentImpl",
						"value":"// the @extends tag."
					}
				},
				{
					"210":{
						"locationInParent":"STATEMENT",
						"value2":"// If the programmer has declared that F inherits from Super,\n// and they assign F.prototype to an object literal,\n// then they are responsible for making sure that the object literal's\n// implicit prototype is set up appropriately. We just obey\n// the @extends tag.\nif (!com.google.javascript.jscomp.Scope.Var.isTypeInferred()) {\n    // If the programmer has declared that F inherits from Super,\n    // and they assign F.prototype to some arbitrary expression,\n    // there's not much we can do. We just ignore the expression,\n    // and hope they've annotated their code in a way to tell us\n    // what props are going to be on that prototype.\n    return;\n}",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtIfImpl",
						"value":"// If the programmer has declared that F inherits from Super,\n// and they assign F.prototype to an object literal,\n// then they are responsible for making sure that the object literal's\n// implicit prototype is set up appropriately. We just obey\n// the @extends tag.\nif (!qVar.isTypeInferred()) {\n    // If the programmer has declared that F inherits from Super,\n    // and they assign F.prototype to some arbitrary expression,\n    // there's not much we can do. We just ignore the expression,\n    // and hope they've annotated their code in a way to tell us\n    // what props are going to be on that prototype.\n    return;\n}"
					}
				},
				{
					"1925":{
						"locationInParent":"CONDITION",
						"value2":"((com.google.javascript.rhino.jstype.ObjectType != null) && (com.google.javascript.rhino.Node != null)) && (com.google.javascript.rhino.Node.getType() == com.google.javascript.rhino.Token.com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder)",
						"valueType":"null type",
						"nodeType":"class spoon.support.reflect.code.CtBinaryOperatorImpl",
						"value":"((qVarType != null) && (rhsValue != null)) && (rhsValue.getType() == Token.OBJECTLIT)"
					}
				},
				{
					"238":{
						"locationInParent":"THEN",
						"value2":"{\n    // If the programmer has declared that F inherits from Super,\n    // and they assign F.prototype to an object literal,\n    // then they are responsible for making sure that the object literal's\n    // implicit prototype is set up appropriately. We just obey\n    // the @extends tag.\n    if (!com.google.javascript.jscomp.Scope.Var.isTypeInferred()) {\n        // If the programmer has declared that F inherits from Super,\n        // and they assign F.prototype to some arbitrary expression,\n        // there's not much we can do. We just ignore the expression,\n        // and hope they've annotated their code in a way to tell us\n        // what props are going to be on that prototype.\n        return;\n    }\n    if (com.google.javascript.jscomp.Scope.Var.getScope() == com.google.javascript.jscomp.Scope) {\n        com.google.javascript.jscomp.Scope.undeclare(com.google.javascript.jscomp.Scope.Var);\n    }\n}",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtBlockImpl",
						"value":"{\n    // If the programmer has declared that F inherits from Super,\n    // and they assign F.prototype to an object literal,\n    // then they are responsible for making sure that the object literal's\n    // implicit prototype is set up appropriately. We just obey\n    // the @extends tag.\n    if (!qVar.isTypeInferred()) {\n        // If the programmer has declared that F inherits from Super,\n        // and they assign F.prototype to some arbitrary expression,\n        // there's not much we can do. We just ignore the expression,\n        // and hope they've annotated their code in a way to tell us\n        // what props are going to be on that prototype.\n        return;\n    }\n    if (qVar.getScope() == scope) {\n        scope.undeclare(qVar);\n    }\n}"
					}
				}
			],
			"edge_label":[
				[
					0,
					1,
					0,
					0,
					0
				],
				[
					1,
					0,
					1,
					0,
					0
				],
				[
					0,
					1,
					0,
					1,
					1
				],
				[
					0,
					0,
					1,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0
				]
			]
		},
		{
			"vertexes":[
				1856,
				238,
				190,
				239,
				1925,
				1902,
				1892,
				1889,
				1884,
				1870,
				1869,
				1868,
				1867,
				1954,
				1953,
				1952,
				1951,
				1888,
				1887,
				1886,
				1962,
				1960,
				1958,
				1861,
				1860,
				1859,
				1866,
				1863,
				1862,
				1865,
				1864,
				1873,
				1872,
				1871,
				1874,
				1875,
				1876,
				1877,
				1883,
				1858,
				1857,
				1878,
				1879,
				1880,
				1881,
				1882,
				1982,
				1885
			],
			"edges":[
				[
					"",
					"Action",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"Action",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"Action",
					"",
					"Control Dep",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"Action"
				],
				[
					"",
					"Control Dep",
					"",
					"AST",
					"Control Dep",
					"Control Dep",
					"Control Dep",
					"Control Dep",
					"",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"Control Dep",
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"",
					"Control Dep",
					"",
					"",
					"Control Dep",
					"",
					"Control Dep",
					"",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"Control Dep",
					""
				],
				[
					"",
					"AST",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"Control Dep",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"",
					"Control Dep",
					"Control Dep",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					""
				],
				[
					"",
					"",
					"Control Dep",
					"",
					"AST",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"Control Dep",
					"",
					"",
					"AST",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"AST",
					"",
					"Define-Use",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"Define-Use",
					"",
					"Data Dep",
					"",
					"",
					"",
					"Define-Use",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"Data Dep",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"Define-Use",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					""
				],
				[
					"",
					"",
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"AST",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"AST",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"Action",
					"",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"AST",
					"",
					"AST",
					"AST",
					"AST",
					"AST",
					"AST",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"Control Dep",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"Action"
				],
				[
					"",
					"Action",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"Action",
					""
				]
			],
			"vertex_label":[
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1
			],
			"attribute_label":[
				{
					"1856":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"238":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"190":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"239":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1925":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1902":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1892":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1889":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1884":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1870":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1869":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1868":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1867":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1954":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1953":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1952":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1951":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1888":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1887":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1886":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1962":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1960":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1958":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1861":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1860":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1859":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1866":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1863":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1862":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1865":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1864":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1873":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1872":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1871":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1874":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1875":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1876":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1877":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1883":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1858":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1857":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1878":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1879":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1880":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1881":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1882":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1982":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1885":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				}
			],
			"attributes":[
				{
					"1856":{
						"locationInParent":"ACTION",
						"value2":"",
						"valueType":"no type",
						"nodeType":"class model.actions.Insert",
						"value":"INSERT"
					}
				},
				{
					"238":{
						"locationInParent":"THEN",
						"value2":"{\n    // If the programmer has declared that F inherits from Super,\n    // and they assign F.prototype to an object literal,\n    // then they are responsible for making sure that the object literal's\n    // implicit prototype is set up appropriately. We just obey\n    // the @extends tag.\n    if (!com.google.javascript.jscomp.Scope.Var.isTypeInferred()) {\n        // If the programmer has declared that F inherits from Super,\n        // and they assign F.prototype to some arbitrary expression,\n        // there's not much we can do. We just ignore the expression,\n        // and hope they've annotated their code in a way to tell us\n        // what props are going to be on that prototype.\n        return;\n    }\n    if (com.google.javascript.jscomp.Scope.Var.getScope() == com.google.javascript.jscomp.Scope) {\n        com.google.javascript.jscomp.Scope.undeclare(com.google.javascript.jscomp.Scope.Var);\n    }\n}",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtBlockImpl",
						"value":"{\n    // If the programmer has declared that F inherits from Super,\n    // and they assign F.prototype to an object literal,\n    // then they are responsible for making sure that the object literal's\n    // implicit prototype is set up appropriately. We just obey\n    // the @extends tag.\n    if (!qVar.isTypeInferred()) {\n        // If the programmer has declared that F inherits from Super,\n        // and they assign F.prototype to some arbitrary expression,\n        // there's not much we can do. We just ignore the expression,\n        // and hope they've annotated their code in a way to tell us\n        // what props are going to be on that prototype.\n        return;\n    }\n    if (qVar.getScope() == scope) {\n        scope.undeclare(qVar);\n    }\n}"
					}
				},
				{
					"190":{
						"locationInParent":"CONDITION",
						"value2":"com.google.javascript.jscomp.Scope.Var != null",
						"valueType":"null type",
						"nodeType":"class spoon.support.reflect.code.CtBinaryOperatorImpl",
						"value":"qVar != null"
					}
				},
				{
					"239":{
						"locationInParent":"STATEMENT",
						"value2":"exceed MAX_TOKEN_LENGTH:16 tokens",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtIfImpl",
						"value":"exceed MAX_TOKEN_LENGTH:16 tokens"
					}
				},
				{
					"1925":{
						"locationInParent":"CONDITION",
						"value2":"((com.google.javascript.rhino.jstype.ObjectType != null) && (com.google.javascript.rhino.Node != null)) && (com.google.javascript.rhino.Node.getType() == com.google.javascript.rhino.Token.com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder)",
						"valueType":"null type",
						"nodeType":"class spoon.support.reflect.code.CtBinaryOperatorImpl",
						"value":"((qVarType != null) && (rhsValue != null)) && (rhsValue.getType() == Token.OBJECTLIT)"
					}
				},
				{
					"1902":{
						"locationInParent":"LEFT_OPERAND",
						"value2":"((com.google.javascript.rhino.jstype.ObjectType != null) && (com.google.javascript.rhino.Node != null))",
						"valueType":"null type",
						"nodeType":"class spoon.support.reflect.code.CtBinaryOperatorImpl",
						"value":"((qVarType != null) && (rhsValue != null))"
					}
				},
				{
					"1892":{
						"locationInParent":"LEFT_OPERAND",
						"value2":"(com.google.javascript.rhino.jstype.ObjectType != null)",
						"valueType":"null type",
						"nodeType":"class spoon.support.reflect.code.CtBinaryOperatorImpl",
						"value":"(qVarType != null)"
					}
				},
				{
					"1889":{
						"locationInParent":"LEFT_OPERAND",
						"value2":"com.google.javascript.rhino.jstype.ObjectType",
						"valueType":"com.google.javascript.rhino.jstype.ObjectType",
						"nodeType":"class spoon.support.reflect.code.CtVariableReadImpl",
						"value":"qVarType"
					}
				},
				{
					"1884":{
						"locationInParent":"LOCAL_VAR_NAME",
						"value2":"qVarType",
						"valueType":"no type",
						"nodeType":"class codegraph.CtVirtualElement",
						"value":"qVarType"
					}
				},
				{
					"1870":{
						"locationInParent":"TARGET",
						"value2":"com.google.javascript.jscomp.Scope.Var",
						"valueType":"com.google.javascript.jscomp.Scope.Var",
						"nodeType":"class spoon.support.reflect.code.CtVariableReadImpl",
						"value":"qVar"
					}
				},
				{
					"1869":{
						"locationInParent":"VARIABLE",
						"value2":"com.google.javascript.jscomp.Scope.Var",
						"valueType":"com.google.javascript.jscomp.Scope.Var",
						"nodeType":"class spoon.support.reflect.reference.CtLocalVariableReferenceImpl",
						"value":"qVar"
					}
				},
				{
					"1868":{
						"locationInParent":"TYPE",
						"value2":"com.google.javascript.jscomp.Scope.Var",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"Var"
					}
				},
				{
					"1867":{
						"locationInParent":"PACKAGE_REF",
						"value2":"com.google.javascript.jscomp.Scope",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtPackageReferenceImpl",
						"value":"com.google.javascript.jscomp.Scope"
					}
				},
				{
					"1954":{
						"locationInParent":"TARGET",
						"value2":"com.google.javascript.rhino.jstype.ObjectType",
						"valueType":"com.google.javascript.rhino.jstype.ObjectType",
						"nodeType":"class spoon.support.reflect.code.CtVariableReadImpl",
						"value":"qVarType"
					}
				},
				{
					"1953":{
						"locationInParent":"VARIABLE",
						"value2":"com.google.javascript.rhino.jstype.ObjectType",
						"valueType":"com.google.javascript.rhino.jstype.ObjectType",
						"nodeType":"class spoon.support.reflect.reference.CtLocalVariableReferenceImpl",
						"value":"qVarType"
					}
				},
				{
					"1952":{
						"locationInParent":"TYPE",
						"value2":"com.google.javascript.rhino.jstype.ObjectType",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"ObjectType"
					}
				},
				{
					"1951":{
						"locationInParent":"PACKAGE_REF",
						"value2":"com.google.javascript.rhino.jstype",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtPackageReferenceImpl",
						"value":"com.google.javascript.rhino.jstype"
					}
				},
				{
					"1888":{
						"locationInParent":"VARIABLE",
						"value2":"com.google.javascript.rhino.jstype.ObjectType",
						"valueType":"com.google.javascript.rhino.jstype.ObjectType",
						"nodeType":"class spoon.support.reflect.reference.CtLocalVariableReferenceImpl",
						"value":"qVarType"
					}
				},
				{
					"1887":{
						"locationInParent":"TYPE",
						"value2":"com.google.javascript.rhino.jstype.ObjectType",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"ObjectType"
					}
				},
				{
					"1886":{
						"locationInParent":"PACKAGE_REF",
						"value2":"com.google.javascript.rhino.jstype",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtPackageReferenceImpl",
						"value":"com.google.javascript.rhino.jstype"
					}
				},
				{
					"1962":{
						"locationInParent":"THEN",
						"value2":"{\n    com.google.javascript.rhino.jstype.JSTypeRegistry.resetImplicitPrototype(com.google.javascript.rhino.Node.getJSType(), com.google.javascript.rhino.jstype.ObjectType.getImplicitPrototype());\n}",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtBlockImpl",
						"value":"{\n    typeRegistry.resetImplicitPrototype(rhsValue.getJSType(), qVarType.getImplicitPrototype());\n}"
					}
				},
				{
					"1960":{
						"locationInParent":"STATEMENT",
						"value2":"com.google.javascript.rhino.jstype.JSTypeRegistry.resetImplicitPrototype(com.google.javascript.rhino.Node.getJSType(), com.google.javascript.rhino.jstype.ObjectType.getImplicitPrototype())",
						"valueType":"null type",
						"nodeType":"class spoon.support.reflect.code.CtInvocationImpl",
						"value":"typeRegistry.resetImplicitPrototype(rhsValue.getJSType(), qVarType.getImplicitPrototype())"
					}
				},
				{
					"1958":{
						"locationInParent":"ARGUMENT",
						"value2":"com.google.javascript.rhino.jstype.ObjectType.getImplicitPrototype()",
						"valueType":"null type",
						"nodeType":"class spoon.support.reflect.code.CtInvocationImpl",
						"value":"qVarType.getImplicitPrototype()"
					}
				},
				{
					"1861":{
						"locationInParent":"TARGET",
						"value2":"com.google.javascript.rhino.jstype.ObjectType",
						"valueType":"void",
						"nodeType":"class spoon.support.reflect.code.CtTypeAccessImpl",
						"value":"ObjectType"
					}
				},
				{
					"1860":{
						"locationInParent":"ACCESSED_TYPE",
						"value2":"com.google.javascript.rhino.jstype.ObjectType",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"ObjectType"
					}
				},
				{
					"1859":{
						"locationInParent":"PACKAGE_REF",
						"value2":"com.google.javascript.rhino.jstype",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtPackageReferenceImpl",
						"value":"com.google.javascript.rhino.jstype"
					}
				},
				{
					"1866":{
						"locationInParent":"EXECUTABLE_REF",
						"value2":"cast",
						"valueType":"com.google.javascript.rhino.jstype.ObjectType",
						"nodeType":"class spoon.support.reflect.reference.CtExecutableReferenceImpl",
						"value":"cast"
					}
				},
				{
					"1863":{
						"locationInParent":"DECLARING_TYPE",
						"value2":"com.google.javascript.rhino.jstype.ObjectType",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"ObjectType"
					}
				},
				{
					"1862":{
						"locationInParent":"PACKAGE_REF",
						"value2":"com.google.javascript.rhino.jstype",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtPackageReferenceImpl",
						"value":"com.google.javascript.rhino.jstype"
					}
				},
				{
					"1865":{
						"locationInParent":"TYPE",
						"value2":"com.google.javascript.rhino.jstype.ObjectType",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"ObjectType"
					}
				},
				{
					"1864":{
						"locationInParent":"PACKAGE_REF",
						"value2":"com.google.javascript.rhino.jstype",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtPackageReferenceImpl",
						"value":"com.google.javascript.rhino.jstype"
					}
				},
				{
					"1873":{
						"locationInParent":"EXECUTABLE_REF",
						"value2":"getType",
						"valueType":"null type",
						"nodeType":"class spoon.support.reflect.reference.CtExecutableReferenceImpl",
						"value":"getType"
					}
				},
				{
					"1872":{
						"locationInParent":"DECLARING_TYPE",
						"value2":"com.google.javascript.jscomp.Scope.Var",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"Var"
					}
				},
				{
					"1871":{
						"locationInParent":"PACKAGE_REF",
						"value2":"com.google.javascript.jscomp.Scope",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtPackageReferenceImpl",
						"value":"com.google.javascript.jscomp.Scope"
					}
				},
				{
					"1874":{
						"locationInParent":"ARGUMENT",
						"value2":"com.google.javascript.jscomp.Scope.Var.getType()",
						"valueType":"null type",
						"nodeType":"class spoon.support.reflect.code.CtInvocationImpl",
						"value":"qVar.getType()"
					}
				},
				{
					"1875":{
						"locationInParent":"METHOD_NAME",
						"value2":"getType",
						"valueType":"no type",
						"nodeType":"class codegraph.CtVirtualElement",
						"value":"getType"
					}
				},
				{
					"1876":{
						"locationInParent":"DEFAULT_EXPRESSION",
						"value2":"com.google.javascript.rhino.jstype.ObjectType.cast(com.google.javascript.jscomp.Scope.Var.getType())",
						"valueType":"com.google.javascript.rhino.jstype.ObjectType",
						"nodeType":"class spoon.support.reflect.code.CtInvocationImpl",
						"value":"ObjectType.cast(qVar.getType())"
					}
				},
				{
					"1877":{
						"locationInParent":"METHOD_NAME",
						"value2":"cast",
						"valueType":"no type",
						"nodeType":"class codegraph.CtVirtualElement",
						"value":"cast"
					}
				},
				{
					"1883":{
						"locationInParent":"STATEMENT",
						"value2":"// If the programmer has declared that F inherits from Super,\n// and they assign F.prototype to an object literal,\n// then they are responsible for making sure that the object literal's\n// implicit prototype is set up appropriately. We just obey\n// the @extends tag.\ncom.google.javascript.rhino.jstype.ObjectType qVarType = com.google.javascript.rhino.jstype.ObjectType.cast(com.google.javascript.jscomp.Scope.Var.getType())",
						"valueType":"com.google.javascript.rhino.jstype.ObjectType",
						"nodeType":"class spoon.support.reflect.code.CtLocalVariableImpl",
						"value":"// If the programmer has declared that F inherits from Super,\n// and they assign F.prototype to an object literal,\n// then they are responsible for making sure that the object literal's\n// implicit prototype is set up appropriately. We just obey\n// the @extends tag.\nObjectType qVarType = ObjectType.cast(qVar.getType())"
					}
				},
				{
					"1858":{
						"locationInParent":"TYPE",
						"value2":"com.google.javascript.rhino.jstype.ObjectType",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"ObjectType"
					}
				},
				{
					"1857":{
						"locationInParent":"PACKAGE_REF",
						"value2":"com.google.javascript.rhino.jstype",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtPackageReferenceImpl",
						"value":"com.google.javascript.rhino.jstype"
					}
				},
				{
					"1878":{
						"locationInParent":"COMMENT",
						"value2":"// If the programmer has declared that F inherits from Super,",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtCommentImpl",
						"value":"// If the programmer has declared that F inherits from Super,"
					}
				},
				{
					"1879":{
						"locationInParent":"COMMENT",
						"value2":"// and they assign F.prototype to an object literal,",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtCommentImpl",
						"value":"// and they assign F.prototype to an object literal,"
					}
				},
				{
					"1880":{
						"locationInParent":"COMMENT",
						"value2":"// then they are responsible for making sure that the object literal's",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtCommentImpl",
						"value":"// then they are responsible for making sure that the object literal's"
					}
				},
				{
					"1881":{
						"locationInParent":"COMMENT",
						"value2":"// implicit prototype is set up appropriately. We just obey",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtCommentImpl",
						"value":"// implicit prototype is set up appropriately. We just obey"
					}
				},
				{
					"1882":{
						"locationInParent":"COMMENT",
						"value2":"// the @extends tag.",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtCommentImpl",
						"value":"// the @extends tag."
					}
				},
				{
					"1982":{
						"locationInParent":"STATEMENT",
						"value2":"exceed MAX_TOKEN_LENGTH:23 tokens",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtIfImpl",
						"value":"exceed MAX_TOKEN_LENGTH:23 tokens"
					}
				},
				{
					"1885":{
						"locationInParent":"ACTION",
						"value2":"",
						"valueType":"no type",
						"nodeType":"class model.actions.Insert",
						"value":"INSERT"
					}
				}
			],
			"edge_label":[
				[
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					1,
					0,
					1,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1
				],
				[
					0,
					1,
					0,
					1,
					1,
					1,
					1,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					1,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0
				],
				[
					0,
					1,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0
				],
				[
					0,
					0,
					1,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					1,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					1,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					1,
					0,
					1,
					1,
					1,
					1,
					1,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1
				],
				[
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0
				]
			]
		},
		{
			"vertexes":[
				1983,
				210,
				190,
				238,
				197,
				1925,
				1981,
				1980,
				1972,
				1970,
				1971,
				1966,
				1965,
				1964,
				1963,
				1969,
				1968,
				1967,
				1979,
				1978,
				1973,
				1974,
				1975,
				1976,
				1977,
				1982,
				204,
				203
			],
			"edges":[
				[
					"",
					"Action",
					"",
					"",
					"",
					"",
					"",
					"Action",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"Action",
					"",
					"Control Dep",
					"AST",
					"AST",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					""
				],
				[
					"",
					"Control Dep",
					"",
					"Control Dep",
					"Control Dep",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"Control Dep",
					"",
					""
				],
				[
					"",
					"AST",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"AST",
					"Control Dep",
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"Control Dep",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"",
					"Control Dep",
					"Control Dep"
				],
				[
					"",
					"Control Dep",
					"Control Dep",
					"",
					"Control Dep",
					"",
					"Control Dep",
					"Control Dep",
					"Control Dep",
					"Control Dep",
					"",
					"Control Dep",
					"",
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"Control Dep",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					""
				],
				[
					"Action",
					"",
					"",
					"",
					"",
					"Control Dep",
					"AST",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"Control Dep",
					"",
					"AST",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"Control Dep",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"",
					"Control Dep",
					"Control Dep"
				],
				[
					"",
					"",
					"",
					"",
					"",
					"Control Dep",
					"",
					"",
					"AST",
					"",
					"AST",
					"AST",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"Control Dep",
					"",
					"",
					"AST",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"AST",
					"AST",
					"AST",
					"AST",
					"AST",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"",
					"Control Dep",
					"",
					"",
					"AST",
					"AST",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					""
				],
				[
					"",
					"AST",
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST"
				],
				[
					"",
					"",
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"Control Dep",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"AST",
					""
				]
			],
			"vertex_label":[
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1,
				1
			],
			"attribute_label":[
				{
					"1983":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"210":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"190":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"238":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"197":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1925":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1981":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1980":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1972":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1970":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1971":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1966":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1965":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1964":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1963":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1969":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1968":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1967":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1979":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1978":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1973":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1974":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1975":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1976":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1977":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"1982":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"204":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				},
				{
					"203":{
						"locationInParent":1,
						"value2":1,
						"valueType":1,
						"nodeType":1,
						"value":1
					}
				}
			],
			"attributes":[
				{
					"1983":{
						"locationInParent":"ACTION",
						"value2":"",
						"valueType":"no type",
						"nodeType":"class model.actions.Move",
						"value":"MOVE"
					}
				},
				{
					"210":{
						"locationInParent":"STATEMENT",
						"value2":"// If the programmer has declared that F inherits from Super,\n// and they assign F.prototype to an object literal,\n// then they are responsible for making sure that the object literal's\n// implicit prototype is set up appropriately. We just obey\n// the @extends tag.\nif (!com.google.javascript.jscomp.Scope.Var.isTypeInferred()) {\n    // If the programmer has declared that F inherits from Super,\n    // and they assign F.prototype to some arbitrary expression,\n    // there's not much we can do. We just ignore the expression,\n    // and hope they've annotated their code in a way to tell us\n    // what props are going to be on that prototype.\n    return;\n}",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtIfImpl",
						"value":"// If the programmer has declared that F inherits from Super,\n// and they assign F.prototype to an object literal,\n// then they are responsible for making sure that the object literal's\n// implicit prototype is set up appropriately. We just obey\n// the @extends tag.\nif (!qVar.isTypeInferred()) {\n    // If the programmer has declared that F inherits from Super,\n    // and they assign F.prototype to some arbitrary expression,\n    // there's not much we can do. We just ignore the expression,\n    // and hope they've annotated their code in a way to tell us\n    // what props are going to be on that prototype.\n    return;\n}"
					}
				},
				{
					"190":{
						"locationInParent":"CONDITION",
						"value2":"com.google.javascript.jscomp.Scope.Var != null",
						"valueType":"null type",
						"nodeType":"class spoon.support.reflect.code.CtBinaryOperatorImpl",
						"value":"qVar != null"
					}
				},
				{
					"238":{
						"locationInParent":"THEN",
						"value2":"{\n    // If the programmer has declared that F inherits from Super,\n    // and they assign F.prototype to an object literal,\n    // then they are responsible for making sure that the object literal's\n    // implicit prototype is set up appropriately. We just obey\n    // the @extends tag.\n    if (!com.google.javascript.jscomp.Scope.Var.isTypeInferred()) {\n        // If the programmer has declared that F inherits from Super,\n        // and they assign F.prototype to some arbitrary expression,\n        // there's not much we can do. We just ignore the expression,\n        // and hope they've annotated their code in a way to tell us\n        // what props are going to be on that prototype.\n        return;\n    }\n    if (com.google.javascript.jscomp.Scope.Var.getScope() == com.google.javascript.jscomp.Scope) {\n        com.google.javascript.jscomp.Scope.undeclare(com.google.javascript.jscomp.Scope.Var);\n    }\n}",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtBlockImpl",
						"value":"{\n    // If the programmer has declared that F inherits from Super,\n    // and they assign F.prototype to an object literal,\n    // then they are responsible for making sure that the object literal's\n    // implicit prototype is set up appropriately. We just obey\n    // the @extends tag.\n    if (!qVar.isTypeInferred()) {\n        // If the programmer has declared that F inherits from Super,\n        // and they assign F.prototype to some arbitrary expression,\n        // there's not much we can do. We just ignore the expression,\n        // and hope they've annotated their code in a way to tell us\n        // what props are going to be on that prototype.\n        return;\n    }\n    if (qVar.getScope() == scope) {\n        scope.undeclare(qVar);\n    }\n}"
					}
				},
				{
					"197":{
						"locationInParent":"CONDITION",
						"value2":"!com.google.javascript.jscomp.Scope.Var.isTypeInferred()",
						"valueType":"null type",
						"nodeType":"class spoon.support.reflect.code.CtUnaryOperatorImpl",
						"value":"!qVar.isTypeInferred()"
					}
				},
				{
					"1925":{
						"locationInParent":"CONDITION",
						"value2":"((com.google.javascript.rhino.jstype.ObjectType != null) && (com.google.javascript.rhino.Node != null)) && (com.google.javascript.rhino.Node.getType() == com.google.javascript.rhino.Token.com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder)",
						"valueType":"null type",
						"nodeType":"class spoon.support.reflect.code.CtBinaryOperatorImpl",
						"value":"((qVarType != null) && (rhsValue != null)) && (rhsValue.getType() == Token.OBJECTLIT)"
					}
				},
				{
					"1981":{
						"locationInParent":"ELSE",
						"value2":"\n    if (!com.google.javascript.jscomp.Scope.Var.isTypeInferred()) {\n        // If the programmer has declared that F inherits from Super,\n        // and they assign F.prototype to some arbitrary expression,\n        // there's not much we can do. We just ignore the expression,\n        // and hope they've annotated their code in a way to tell us\n        // what props are going to be on that prototype.\n        return;\n    }\n",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtBlockImpl",
						"value":"\n    if (!qVar.isTypeInferred()) {\n        // If the programmer has declared that F inherits from Super,\n        // and they assign F.prototype to some arbitrary expression,\n        // there's not much we can do. We just ignore the expression,\n        // and hope they've annotated their code in a way to tell us\n        // what props are going to be on that prototype.\n        return;\n    }\n"
					}
				},
				{
					"1980":{
						"locationInParent":"STATEMENT",
						"value2":"if (!com.google.javascript.jscomp.Scope.Var.isTypeInferred()) {\n    // If the programmer has declared that F inherits from Super,\n    // and they assign F.prototype to some arbitrary expression,\n    // there's not much we can do. We just ignore the expression,\n    // and hope they've annotated their code in a way to tell us\n    // what props are going to be on that prototype.\n    return;\n}",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtIfImpl",
						"value":"if (!qVar.isTypeInferred()) {\n    // If the programmer has declared that F inherits from Super,\n    // and they assign F.prototype to some arbitrary expression,\n    // there's not much we can do. We just ignore the expression,\n    // and hope they've annotated their code in a way to tell us\n    // what props are going to be on that prototype.\n    return;\n}"
					}
				},
				{
					"1972":{
						"locationInParent":"CONDITION",
						"value2":"!com.google.javascript.jscomp.Scope.Var.isTypeInferred()",
						"valueType":"null type",
						"nodeType":"class spoon.support.reflect.code.CtUnaryOperatorImpl",
						"value":"!qVar.isTypeInferred()"
					}
				},
				{
					"1970":{
						"locationInParent":"EXPRESSION",
						"value2":"com.google.javascript.jscomp.Scope.Var.isTypeInferred()",
						"valueType":"null type",
						"nodeType":"class spoon.support.reflect.code.CtInvocationImpl",
						"value":"qVar.isTypeInferred()"
					}
				},
				{
					"1971":{
						"locationInParent":"METHOD_NAME",
						"value2":"isTypeInferred",
						"valueType":"no type",
						"nodeType":"class codegraph.CtVirtualElement",
						"value":"isTypeInferred"
					}
				},
				{
					"1966":{
						"locationInParent":"TARGET",
						"value2":"com.google.javascript.jscomp.Scope.Var",
						"valueType":"com.google.javascript.jscomp.Scope.Var",
						"nodeType":"class spoon.support.reflect.code.CtVariableReadImpl",
						"value":"qVar"
					}
				},
				{
					"1965":{
						"locationInParent":"VARIABLE",
						"value2":"com.google.javascript.jscomp.Scope.Var",
						"valueType":"com.google.javascript.jscomp.Scope.Var",
						"nodeType":"class spoon.support.reflect.reference.CtLocalVariableReferenceImpl",
						"value":"qVar"
					}
				},
				{
					"1964":{
						"locationInParent":"TYPE",
						"value2":"com.google.javascript.jscomp.Scope.Var",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"Var"
					}
				},
				{
					"1963":{
						"locationInParent":"PACKAGE_REF",
						"value2":"com.google.javascript.jscomp.Scope",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtPackageReferenceImpl",
						"value":"com.google.javascript.jscomp.Scope"
					}
				},
				{
					"1969":{
						"locationInParent":"EXECUTABLE_REF",
						"value2":"isTypeInferred",
						"valueType":"null type",
						"nodeType":"class spoon.support.reflect.reference.CtExecutableReferenceImpl",
						"value":"isTypeInferred"
					}
				},
				{
					"1968":{
						"locationInParent":"DECLARING_TYPE",
						"value2":"com.google.javascript.jscomp.Scope.Var",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtTypeReferenceImpl",
						"value":"Var"
					}
				},
				{
					"1967":{
						"locationInParent":"PACKAGE_REF",
						"value2":"com.google.javascript.jscomp.Scope",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.reference.CtPackageReferenceImpl",
						"value":"com.google.javascript.jscomp.Scope"
					}
				},
				{
					"1979":{
						"locationInParent":"THEN",
						"value2":"{\n    // If the programmer has declared that F inherits from Super,\n    // and they assign F.prototype to some arbitrary expression,\n    // there's not much we can do. We just ignore the expression,\n    // and hope they've annotated their code in a way to tell us\n    // what props are going to be on that prototype.\n    return;\n}",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtBlockImpl",
						"value":"{\n    // If the programmer has declared that F inherits from Super,\n    // and they assign F.prototype to some arbitrary expression,\n    // there's not much we can do. We just ignore the expression,\n    // and hope they've annotated their code in a way to tell us\n    // what props are going to be on that prototype.\n    return;\n}"
					}
				},
				{
					"1978":{
						"locationInParent":"STATEMENT",
						"value2":"// If the programmer has declared that F inherits from Super,\n// and they assign F.prototype to some arbitrary expression,\n// there's not much we can do. We just ignore the expression,\n// and hope they've annotated their code in a way to tell us\n// what props are going to be on that prototype.\nreturn",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtReturnImpl",
						"value":"// If the programmer has declared that F inherits from Super,\n// and they assign F.prototype to some arbitrary expression,\n// there's not much we can do. We just ignore the expression,\n// and hope they've annotated their code in a way to tell us\n// what props are going to be on that prototype.\nreturn"
					}
				},
				{
					"1973":{
						"locationInParent":"COMMENT",
						"value2":"// If the programmer has declared that F inherits from Super,",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtCommentImpl",
						"value":"// If the programmer has declared that F inherits from Super,"
					}
				},
				{
					"1974":{
						"locationInParent":"COMMENT",
						"value2":"// and they assign F.prototype to some arbitrary expression,",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtCommentImpl",
						"value":"// and they assign F.prototype to some arbitrary expression,"
					}
				},
				{
					"1975":{
						"locationInParent":"COMMENT",
						"value2":"// there's not much we can do. We just ignore the expression,",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtCommentImpl",
						"value":"// there's not much we can do. We just ignore the expression,"
					}
				},
				{
					"1976":{
						"locationInParent":"COMMENT",
						"value2":"// and hope they've annotated their code in a way to tell us",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtCommentImpl",
						"value":"// and hope they've annotated their code in a way to tell us"
					}
				},
				{
					"1977":{
						"locationInParent":"COMMENT",
						"value2":"// what props are going to be on that prototype.",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtCommentImpl",
						"value":"// what props are going to be on that prototype."
					}
				},
				{
					"1982":{
						"locationInParent":"STATEMENT",
						"value2":"exceed MAX_TOKEN_LENGTH:23 tokens",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtIfImpl",
						"value":"exceed MAX_TOKEN_LENGTH:23 tokens"
					}
				},
				{
					"204":{
						"locationInParent":"THEN",
						"value2":"{\n    // If the programmer has declared that F inherits from Super,\n    // and they assign F.prototype to some arbitrary expression,\n    // there's not much we can do. We just ignore the expression,\n    // and hope they've annotated their code in a way to tell us\n    // what props are going to be on that prototype.\n    return;\n}",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtBlockImpl",
						"value":"{\n    // If the programmer has declared that F inherits from Super,\n    // and they assign F.prototype to some arbitrary expression,\n    // there's not much we can do. We just ignore the expression,\n    // and hope they've annotated their code in a way to tell us\n    // what props are going to be on that prototype.\n    return;\n}"
					}
				},
				{
					"203":{
						"locationInParent":"STATEMENT",
						"value2":"// If the programmer has declared that F inherits from Super,\n// and they assign F.prototype to some arbitrary expression,\n// there's not much we can do. We just ignore the expression,\n// and hope they've annotated their code in a way to tell us\n// what props are going to be on that prototype.\nreturn",
						"valueType":"no type",
						"nodeType":"class spoon.support.reflect.code.CtReturnImpl",
						"value":"// If the programmer has declared that F inherits from Super,\n// and they assign F.prototype to some arbitrary expression,\n// there's not much we can do. We just ignore the expression,\n// and hope they've annotated their code in a way to tell us\n// what props are going to be on that prototype.\nreturn"
					}
				}
			],
			"edge_label":[
				[
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					1,
					0,
					1,
					1,
					1,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0
				],
				[
					0,
					1,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0
				],
				[
					0,
					1,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					1,
					1,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					1
				],
				[
					0,
					1,
					1,
					0,
					1,
					0,
					1,
					1,
					1,
					1,
					0,
					1,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0
				],
				[
					1,
					0,
					0,
					0,
					0,
					1,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					1
				],
				[
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					1,
					0,
					1,
					1,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					1,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					1,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					1,
					1,
					1,
					1,
					1,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					1,
					0,
					0,
					1,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					1,
					0,
					0,
					1,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					0
				]
			]
		}
	]
}