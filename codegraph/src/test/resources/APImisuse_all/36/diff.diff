diff --git a/compiler-jx/src/main/java/org/apache/royale/compiler/internal/codegen/js/royale/JSRoyaleASDocDITAEmitter.java b/compiler-jx/src/main/java/org/apache/royale/compiler/internal/codegen/js/royale/JSRoyaleASDocDITAEmitter.java
index 266a0d6c6..2927115df 100644
--- a/compiler-jx/src/main/java/org/apache/royale/compiler/internal/codegen/js/royale/JSRoyaleASDocDITAEmitter.java
+++ b/compiler-jx/src/main/java/org/apache/royale/compiler/internal/codegen/js/royale/JSRoyaleASDocDITAEmitter.java
@@ -20,6 +20,7 @@
 package org.apache.royale.compiler.internal.codegen.js.royale;
 
 import java.io.File;
+import java.io.BufferedWriter;
 import java.io.FileWriter;
 import java.io.FilterWriter;
 import java.io.IOException;
@@ -1015,10 +1016,10 @@ public void writeAPIProperties(IDefinition def)
     
     public void outputIndex(File outputFolder, RoyaleASDocProject project) throws IOException
     {
-	    final File indexFile = new File(outputFolder, "index.json");
-	    FileWriter out = new FileWriter(indexFile);
-		out.write("{  \"index\": [");
-	    System.out.println("Compiling file: " + indexFile);
+	final File indexFile = new File(outputFolder, "index.json");
+	BufferedWriter out = new BufferedWriter(new FileWriter(indexFile));
+	out.write("{  \"index\": [");
+	System.out.println("Compiling file: " + indexFile);
     	Set<String> keys = project.index.keySet();
     	List<String> keyList = new ArrayList<String>(keys);
     	Collections.sort(keyList);
@@ -1084,10 +1085,10 @@ else if (record.definition instanceof FunctionDefinition)
 
     public void outputClasses(File outputFolder, RoyaleASDocProject project) throws IOException
     {
-	    final File indexFile = new File(outputFolder, "classes.json");
-	    FileWriter out = new FileWriter(indexFile);
-		out.write("{  \"classes\": [");
-	    System.out.println("Compiling file: " + indexFile);
+	final File indexFile = new File(outputFolder, "classes.json");
+	BufferedWriter out = new BufferedWriter(new FileWriter(indexFile));
+	out.write("{  \"classes\": [");
+	System.out.println("Compiling file: " + indexFile);
     	Set<String> keys = project.classes.keySet();
     	List<String> keyList = new ArrayList<String>(keys);
     	Collections.sort(keyList);
@@ -1122,10 +1123,10 @@ public void outputClasses(File outputFolder, RoyaleASDocProject project) throws
     
     public void outputTags(File outputFolder, RoyaleASDocProject project) throws IOException
     {
-	    final File indexFile = new File(outputFolder, "tags.json");
-	    FileWriter out = new FileWriter(indexFile);
-		out.write("{  \"tags\": [");
-	    System.out.println("Compiling file: " + indexFile);
+	final File indexFile = new File(outputFolder, "tags.json");
+	BufferedWriter out = new BufferedWriter(new FileWriter(indexFile));
+	out.write("{  \"tags\": [");
+	System.out.println("Compiling file: " + indexFile);
     	Collections.sort(project.tags);
     	boolean firstLine = true;
     	for (String tag : project.tags)
diff --git a/compiler-jx/src/main/java/org/apache/royale/compiler/internal/codegen/js/royale/JSRoyaleASDocEmitter.java b/compiler-jx/src/main/java/org/apache/royale/compiler/internal/codegen/js/royale/JSRoyaleASDocEmitter.java
index 015779565..c40332c5b 100644
--- a/compiler-jx/src/main/java/org/apache/royale/compiler/internal/codegen/js/royale/JSRoyaleASDocEmitter.java
+++ b/compiler-jx/src/main/java/org/apache/royale/compiler/internal/codegen/js/royale/JSRoyaleASDocEmitter.java
@@ -19,6 +19,7 @@
 
 package org.apache.royale.compiler.internal.codegen.js.royale;
 
+import java.io.BufferedWriter;
 import java.io.File;
 import java.io.FileWriter;
 import java.io.FilterWriter;
@@ -813,10 +814,10 @@ private String getMiddle(RoyaleASDocProject project)
 
     public void outputIndex(File outputFolder, RoyaleASDocProject project) throws IOException
     {
-	    final File indexFile = new File(outputFolder, "index" + getMiddle(project) + ".json");
-	    FileWriter out = new FileWriter(indexFile);
-		out.write("{  \"index\": [");
-	    System.out.println("Compiling file: " + indexFile);
+	final File indexFile = new File(outputFolder, "index" + getMiddle(project) + ".json");
+	BufferedWriter out = new BufferedWriter(new FileWriter(indexFile));
+	out.write("{  \"index\": [");
+	System.out.println("Compiling file: " + indexFile);
     	Set<String> keys = project.index.keySet();
     	List<String> keyList = new ArrayList<String>(keys);
     	Collections.sort(keyList);
@@ -896,7 +897,7 @@ public boolean hasCommentaryTags(ASDocComment asDoc)
     	return false;
     }
     
-    private void writeCommentaryValues(FileWriter commentaryWriter, List<IASDocTag> values) throws IOException
+    private void writeCommentaryValues(BufferedWriter commentaryWriter, List<IASDocTag> values) throws IOException
     {
     	HashMap<String, String> map = new HashMap<String, String>();
 		boolean firstOne = true;
@@ -916,7 +917,7 @@ private void writeCommentaryValues(FileWriter commentaryWriter, List<IASDocTag>
 		}
     }
     
-    public void writeCommentaryFile(FileWriter commentaryWriter, String qname, ASDocComment asDoc) throws IOException
+    public void writeCommentaryFile(BufferedWriter commentaryWriter, String qname, ASDocComment asDoc) throws IOException
     {
     	//asDoc.compile();
     	Map<String, List<IASDocTag>> tags = asDoc.getTags();
@@ -1004,10 +1005,10 @@ else if (tagName.equals("example")) {
 
     public void outputClasses(File outputFolder, RoyaleASDocProject project) throws IOException
     {
-	    final File indexFile = new File(outputFolder, "classes" + getMiddle(project) + ".json");
-	    FileWriter out = new FileWriter(indexFile);
-		out.write("{  \"classes\": [");
-	    System.out.println("Compiling file: " + indexFile);
+	final File indexFile = new File(outputFolder, "classes" + getMiddle(project) + ".json");
+	BufferedWriter out = new BufferedWriter(new FileWriter(indexFile));
+        out.write("{  \"classes\": [");
+	System.out.println("Compiling file: " + indexFile);
     	Set<String> keys = project.classes.keySet();
     	List<String> keyList = new ArrayList<String>(keys);
     	Collections.sort(keyList);
@@ -1065,7 +1066,7 @@ public void outputClasses(File outputFolder, RoyaleASDocProject project) throws
 		}
 		
 	    final File listFile = new File(outputFolder, "classlist" + getMiddle(project) + ".json");
-	    out = new FileWriter(listFile);
+	    out = new BufferedWriter(new FileWriter(listFile));
 		out.write("{  \"classnames\": [");
 	    System.out.println("Compiling file: " + listFile);
     	firstLine = true;
@@ -1096,7 +1097,7 @@ public void outputClasses(File outputFolder, RoyaleASDocProject project) throws
 		
 		if (commentaryList.size() > 0) {    	
 			final File commentaryFile = new File(outputFolder, "commentary" + getMiddle(project) + ".json");
-			FileWriter commentaryWriter = new FileWriter(commentaryFile);
+			BufferedWriter commentaryWriter = new BufferedWriter(new FileWriter(commentaryFile));
 			commentaryWriter.write("{ \"list\": [");
 			System.out.println("Building commentary comparison file: "+commentaryFile);
 			
@@ -1129,10 +1130,10 @@ public void outputClasses(File outputFolder, RoyaleASDocProject project) throws
     
     public void outputTags(File outputFolder, RoyaleASDocProject project) throws IOException
     {
-	    final File indexFile = new File(outputFolder, "tags" + getMiddle(project) + ".json");
-	    FileWriter out = new FileWriter(indexFile);
-		out.write("{  \"tags\": [");
-	    System.out.println("Compiling file: " + indexFile);
+	final File indexFile = new File(outputFolder, "tags" + getMiddle(project) + ".json");
+	BufferedWriter out = new BufferedWriter(new FileWriter(indexFile));
+	out.write("{  \"tags\": [");
+	System.out.println("Compiling file: " + indexFile);
     	Collections.sort(project.tags);
     	boolean firstLine = true;
     	for (String tag : project.tags)
