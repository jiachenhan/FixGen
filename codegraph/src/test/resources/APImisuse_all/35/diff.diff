diff --git a/server/base/src/main/java/org/apache/accumulo/server/util/Admin.java b/server/base/src/main/java/org/apache/accumulo/server/util/Admin.java
index f1180a201f8..9540284fe00 100644
--- a/server/base/src/main/java/org/apache/accumulo/server/util/Admin.java
+++ b/server/base/src/main/java/org/apache/accumulo/server/util/Admin.java
@@ -18,6 +18,7 @@
 
 import static java.util.Objects.requireNonNull;
 
+import java.io.BufferedWriter;
 import java.io.File;
 import java.io.FileWriter;
 import java.io.IOException;
@@ -506,23 +507,23 @@ private void printNameSpaceConfiguration(AccumuloClient accumuloClient, String n
       File outputDirectory)
       throws IOException, AccumuloException, AccumuloSecurityException, NamespaceNotFoundException {
     File namespaceScript = new File(outputDirectory, namespace + NS_FILE_SUFFIX);
-    FileWriter nsWriter = new FileWriter(namespaceScript);
-    nsWriter.write(createNsFormat.format(new String[] {namespace}));
-    TreeMap<String,String> props = new TreeMap<>();
-    for (Entry<String,String> p : accumuloClient.namespaceOperations().getProperties(namespace)) {
-      props.put(p.getKey(), p.getValue());
-    }
-    for (Entry<String,String> entry : props.entrySet()) {
-      String defaultValue = getDefaultConfigValue(entry.getKey());
-      if (defaultValue == null || !defaultValue.equals(entry.getValue())) {
-        if (!entry.getValue().equals(siteConfig.get(entry.getKey()))
-            && !entry.getValue().equals(systemConfig.get(entry.getKey()))) {
-          nsWriter.write(nsConfigFormat
-              .format(new String[] {namespace, entry.getKey() + "=" + entry.getValue()}));
+    try (BufferedWriter nsWriter = new BufferedWriter(new FileWriter(namespaceScript))) {
+      nsWriter.write(createNsFormat.format(new String[] {namespace}));
+      TreeMap<String,String> props = new TreeMap<>();
+      for (Entry<String,String> p : accumuloClient.namespaceOperations().getProperties(namespace)) {
+        props.put(p.getKey(), p.getValue());
+      }
+      for (Entry<String,String> entry : props.entrySet()) {
+        String defaultValue = getDefaultConfigValue(entry.getKey());
+        if (defaultValue == null || !defaultValue.equals(entry.getValue())) {
+          if (!entry.getValue().equals(siteConfig.get(entry.getKey()))
+              && !entry.getValue().equals(systemConfig.get(entry.getKey()))) {
+            nsWriter.write(nsConfigFormat
+                .format(new String[] {namespace, entry.getKey() + "=" + entry.getValue()}));
+          }
         }
       }
     }
-    nsWriter.close();
   }
 
   @SuppressFBWarnings(value = "PATH_TRAVERSAL_IN",
@@ -530,31 +531,30 @@ private void printNameSpaceConfiguration(AccumuloClient accumuloClient, String n
   private static void printUserConfiguration(AccumuloClient accumuloClient, String user,
       File outputDirectory) throws IOException, AccumuloException, AccumuloSecurityException {
     File userScript = new File(outputDirectory, user + USER_FILE_SUFFIX);
-    FileWriter userWriter = new FileWriter(userScript);
-    userWriter.write(createUserFormat.format(new String[] {user}));
-    Authorizations auths = accumuloClient.securityOperations().getUserAuthorizations(user);
-    userWriter.write(userAuthsFormat.format(new String[] {user, auths.toString()}));
-    for (SystemPermission sp : SystemPermission.values()) {
-      if (accumuloClient.securityOperations().hasSystemPermission(user, sp)) {
-        userWriter.write(sysPermFormat.format(new String[] {sp.name(), user}));
+    try (BufferedWriter userWriter = new BufferedWriter(new FileWriter(userScript))) {
+      userWriter.write(createUserFormat.format(new String[] {user}));
+      Authorizations auths = accumuloClient.securityOperations().getUserAuthorizations(user);
+      userWriter.write(userAuthsFormat.format(new String[] {user, auths.toString()}));
+      for (SystemPermission sp : SystemPermission.values()) {
+        if (accumuloClient.securityOperations().hasSystemPermission(user, sp)) {
+          userWriter.write(sysPermFormat.format(new String[] {sp.name(), user}));
+        }
       }
-    }
-    for (String namespace : accumuloClient.namespaceOperations().list()) {
-      for (NamespacePermission np : NamespacePermission.values()) {
-        if (accumuloClient.securityOperations().hasNamespacePermission(user, namespace, np)) {
-          userWriter.write(nsPermFormat.format(new String[] {np.name(), namespace, user}));
+      for (String namespace : accumuloClient.namespaceOperations().list()) {
+        for (NamespacePermission np : NamespacePermission.values()) {
+          if (accumuloClient.securityOperations().hasNamespacePermission(user, namespace, np)) {
+            userWriter.write(nsPermFormat.format(new String[] {np.name(), namespace, user}));
+          }
         }
       }
-    }
-    for (String tableName : accumuloClient.tableOperations().list()) {
-      for (TablePermission perm : TablePermission.values()) {
-        if (accumuloClient.securityOperations().hasTablePermission(user, tableName, perm)) {
-          userWriter.write(tablePermFormat.format(new String[] {perm.name(), tableName, user}));
+      for (String tableName : accumuloClient.tableOperations().list()) {
+        for (TablePermission perm : TablePermission.values()) {
+          if (accumuloClient.securityOperations().hasTablePermission(user, tableName, perm)) {
+            userWriter.write(tablePermFormat.format(new String[] {perm.name(), tableName, user}));
+          }
         }
       }
     }
-
-    userWriter.close();
   }
 
   private void printSystemConfiguration(File outputDirectory) throws IOException {
@@ -574,7 +574,7 @@ private void printSystemConfiguration(File outputDirectory) throws IOException {
       }
     }
     File siteBackup = new File(outputDirectory, ACCUMULO_SITE_BACKUP_FILE);
-    try (FileWriter fw = new FileWriter(siteBackup)) {
+    try (BufferedWriter fw = new BufferedWriter(new FileWriter(siteBackup))) {
       for (Entry<String,String> prop : conf.entrySet()) {
         fw.write(prop.getKey() + "=" + prop.getValue() + "\n");
       }
@@ -586,24 +586,24 @@ private void printSystemConfiguration(File outputDirectory) throws IOException {
   private void printTableConfiguration(AccumuloClient accumuloClient, String tableName,
       File outputDirectory) throws AccumuloException, TableNotFoundException, IOException {
     File tableBackup = new File(outputDirectory, tableName + ".cfg");
-    FileWriter writer = new FileWriter(tableBackup);
-    writer.write(createTableFormat.format(new String[] {tableName}));
-    TreeMap<String,String> props = new TreeMap<>();
-    for (Entry<String,String> p : accumuloClient.tableOperations().getProperties(tableName)) {
-      props.put(p.getKey(), p.getValue());
-    }
-    for (Entry<String,String> prop : props.entrySet()) {
-      if (prop.getKey().startsWith(Property.TABLE_PREFIX.getKey())) {
-        String defaultValue = getDefaultConfigValue(prop.getKey());
-        if (defaultValue == null || !defaultValue.equals(prop.getValue())) {
-          if (!prop.getValue().equals(siteConfig.get(prop.getKey()))
-              && !prop.getValue().equals(systemConfig.get(prop.getKey()))) {
-            writer.write(configFormat
-                .format(new String[] {tableName, prop.getKey() + "=" + prop.getValue()}));
+    try (BufferedWriter writer = new BufferedWriter(new FileWriter(tableBackup))) {
+      writer.write(createTableFormat.format(new String[] {tableName}));
+      TreeMap<String,String> props = new TreeMap<>();
+      for (Entry<String,String> p : accumuloClient.tableOperations().getProperties(tableName)) {
+        props.put(p.getKey(), p.getValue());
+      }
+      for (Entry<String,String> prop : props.entrySet()) {
+        if (prop.getKey().startsWith(Property.TABLE_PREFIX.getKey())) {
+          String defaultValue = getDefaultConfigValue(prop.getKey());
+          if (defaultValue == null || !defaultValue.equals(prop.getValue())) {
+            if (!prop.getValue().equals(siteConfig.get(prop.getKey()))
+                && !prop.getValue().equals(systemConfig.get(prop.getKey()))) {
+              writer.write(configFormat
+                  .format(new String[] {tableName, prop.getKey() + "=" + prop.getValue()}));
+            }
           }
         }
       }
     }
-    writer.close();
   }
 }
